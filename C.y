/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  std::cout << "line " << yy_mylinenumber << std::endl ;
  fprintf(stderr,"error: %s\n",str);
}



static Program* YY_RESULT_Program_ = 0;
Program* pProgram(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}
Program* pProgram(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

static ListExternal_declaration* YY_RESULT_ListExternal_declaration_ = 0;
ListExternal_declaration* pListExternal_declaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExternal_declaration_;
  }
}
ListExternal_declaration* pListExternal_declaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExternal_declaration_;
  }
}

static External_declaration* YY_RESULT_External_declaration_ = 0;
External_declaration* pExternal_declaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_External_declaration_;
  }
}
External_declaration* pExternal_declaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_External_declaration_;
  }
}

static Function_def* YY_RESULT_Function_def_ = 0;
Function_def* pFunction_def(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_def_;
  }
}
Function_def* pFunction_def(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_def_;
  }
}

static Dec* YY_RESULT_Dec_ = 0;
Dec* pDec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Dec_;
  }
}
Dec* pDec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Dec_;
  }
}

static ListDec* YY_RESULT_ListDec_ = 0;
ListDec* pListDec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDec_;
  }
}
ListDec* pListDec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDec_;
  }
}

static ListDeclaration_specifier* YY_RESULT_ListDeclaration_specifier_ = 0;
ListDeclaration_specifier* pListDeclaration_specifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDeclaration_specifier_;
  }
}
ListDeclaration_specifier* pListDeclaration_specifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDeclaration_specifier_;
  }
}

static Declaration_specifier* YY_RESULT_Declaration_specifier_ = 0;
Declaration_specifier* pDeclaration_specifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declaration_specifier_;
  }
}
Declaration_specifier* pDeclaration_specifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declaration_specifier_;
  }
}

static ListInit_declarator* YY_RESULT_ListInit_declarator_ = 0;
ListInit_declarator* pListInit_declarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListInit_declarator_;
  }
}
ListInit_declarator* pListInit_declarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListInit_declarator_;
  }
}

static Init_declarator* YY_RESULT_Init_declarator_ = 0;
Init_declarator* pInit_declarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Init_declarator_;
  }
}
Init_declarator* pInit_declarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Init_declarator_;
  }
}

static Type_specifier* YY_RESULT_Type_specifier_ = 0;
Type_specifier* pType_specifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_specifier_;
  }
}
Type_specifier* pType_specifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_specifier_;
  }
}

static Storage_class_specifier* YY_RESULT_Storage_class_specifier_ = 0;
Storage_class_specifier* pStorage_class_specifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Storage_class_specifier_;
  }
}
Storage_class_specifier* pStorage_class_specifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Storage_class_specifier_;
  }
}

static Type_qualifier* YY_RESULT_Type_qualifier_ = 0;
Type_qualifier* pType_qualifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_qualifier_;
  }
}
Type_qualifier* pType_qualifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_qualifier_;
  }
}

static Struct_or_union_spec* YY_RESULT_Struct_or_union_spec_ = 0;
Struct_or_union_spec* pStruct_or_union_spec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_or_union_spec_;
  }
}
Struct_or_union_spec* pStruct_or_union_spec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_or_union_spec_;
  }
}

static Struct_or_union* YY_RESULT_Struct_or_union_ = 0;
Struct_or_union* pStruct_or_union(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_or_union_;
  }
}
Struct_or_union* pStruct_or_union(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_or_union_;
  }
}

static ListStruct_dec* YY_RESULT_ListStruct_dec_ = 0;
ListStruct_dec* pListStruct_dec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStruct_dec_;
  }
}
ListStruct_dec* pListStruct_dec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStruct_dec_;
  }
}

static Struct_dec* YY_RESULT_Struct_dec_ = 0;
Struct_dec* pStruct_dec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_dec_;
  }
}
Struct_dec* pStruct_dec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_dec_;
  }
}

static ListSpec_qual* YY_RESULT_ListSpec_qual_ = 0;
ListSpec_qual* pListSpec_qual(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListSpec_qual_;
  }
}
ListSpec_qual* pListSpec_qual(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListSpec_qual_;
  }
}

static Spec_qual* YY_RESULT_Spec_qual_ = 0;
Spec_qual* pSpec_qual(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Spec_qual_;
  }
}
Spec_qual* pSpec_qual(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Spec_qual_;
  }
}

static ListStruct_declarator* YY_RESULT_ListStruct_declarator_ = 0;
ListStruct_declarator* pListStruct_declarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStruct_declarator_;
  }
}
ListStruct_declarator* pListStruct_declarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStruct_declarator_;
  }
}

static Struct_declarator* YY_RESULT_Struct_declarator_ = 0;
Struct_declarator* pStruct_declarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_declarator_;
  }
}
Struct_declarator* pStruct_declarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Struct_declarator_;
  }
}

static Enum_specifier* YY_RESULT_Enum_specifier_ = 0;
Enum_specifier* pEnum_specifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Enum_specifier_;
  }
}
Enum_specifier* pEnum_specifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Enum_specifier_;
  }
}

static ListEnumerator* YY_RESULT_ListEnumerator_ = 0;
ListEnumerator* pListEnumerator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListEnumerator_;
  }
}
ListEnumerator* pListEnumerator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListEnumerator_;
  }
}

static Enumerator* YY_RESULT_Enumerator_ = 0;
Enumerator* pEnumerator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Enumerator_;
  }
}
Enumerator* pEnumerator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Enumerator_;
  }
}

static Declarator* YY_RESULT_Declarator_ = 0;
Declarator* pDeclarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declarator_;
  }
}
Declarator* pDeclarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declarator_;
  }
}

static Direct_declarator* YY_RESULT_Direct_declarator_ = 0;
Direct_declarator* pDirect_declarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Direct_declarator_;
  }
}
Direct_declarator* pDirect_declarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Direct_declarator_;
  }
}

static Pointer* YY_RESULT_Pointer_ = 0;
Pointer* pPointer(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Pointer_;
  }
}
Pointer* pPointer(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Pointer_;
  }
}

static ListType_qualifier* YY_RESULT_ListType_qualifier_ = 0;
ListType_qualifier* pListType_qualifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_qualifier_;
  }
}
ListType_qualifier* pListType_qualifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_qualifier_;
  }
}

static Parameter_type* YY_RESULT_Parameter_type_ = 0;
Parameter_type* pParameter_type(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Parameter_type_;
  }
}
Parameter_type* pParameter_type(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Parameter_type_;
  }
}

static Parameter_declarations* YY_RESULT_Parameter_declarations_ = 0;
Parameter_declarations* pParameter_declarations(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Parameter_declarations_;
  }
}
Parameter_declarations* pParameter_declarations(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Parameter_declarations_;
  }
}

static Parameter_declaration* YY_RESULT_Parameter_declaration_ = 0;
Parameter_declaration* pParameter_declaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Parameter_declaration_;
  }
}
Parameter_declaration* pParameter_declaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Parameter_declaration_;
  }
}

static ListIdent* YY_RESULT_ListIdent_ = 0;
ListIdent* pListIdent(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListIdent_;
  }
}
ListIdent* pListIdent(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListIdent_;
  }
}

static Initializer* YY_RESULT_Initializer_ = 0;
Initializer* pInitializer(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Initializer_;
  }
}
Initializer* pInitializer(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Initializer_;
  }
}

static Initializers* YY_RESULT_Initializers_ = 0;
Initializers* pInitializers(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Initializers_;
  }
}
Initializers* pInitializers(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Initializers_;
  }
}

static Type_name* YY_RESULT_Type_name_ = 0;
Type_name* pType_name(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_name_;
  }
}
Type_name* pType_name(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_name_;
  }
}

static Abstract_declarator* YY_RESULT_Abstract_declarator_ = 0;
Abstract_declarator* pAbstract_declarator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Abstract_declarator_;
  }
}
Abstract_declarator* pAbstract_declarator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Abstract_declarator_;
  }
}

static Dir_abs_dec* YY_RESULT_Dir_abs_dec_ = 0;
Dir_abs_dec* pDir_abs_dec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Dir_abs_dec_;
  }
}
Dir_abs_dec* pDir_abs_dec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Dir_abs_dec_;
  }
}

static Stm* YY_RESULT_Stm_ = 0;
Stm* pStm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stm_;
  }
}
Stm* pStm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stm_;
  }
}

static Labeled_stm* YY_RESULT_Labeled_stm_ = 0;
Labeled_stm* pLabeled_stm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Labeled_stm_;
  }
}
Labeled_stm* pLabeled_stm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Labeled_stm_;
  }
}

static Compound_stm* YY_RESULT_Compound_stm_ = 0;
Compound_stm* pCompound_stm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Compound_stm_;
  }
}
Compound_stm* pCompound_stm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Compound_stm_;
  }
}

static Expression_stm* YY_RESULT_Expression_stm_ = 0;
Expression_stm* pExpression_stm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_stm_;
  }
}
Expression_stm* pExpression_stm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_stm_;
  }
}

static Selection_stm* YY_RESULT_Selection_stm_ = 0;
Selection_stm* pSelection_stm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Selection_stm_;
  }
}
Selection_stm* pSelection_stm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Selection_stm_;
  }
}

static Iter_stm* YY_RESULT_Iter_stm_ = 0;
Iter_stm* pIter_stm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Iter_stm_;
  }
}
Iter_stm* pIter_stm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Iter_stm_;
  }
}

static Jump_stm* YY_RESULT_Jump_stm_ = 0;
Jump_stm* pJump_stm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Jump_stm_;
  }
}
Jump_stm* pJump_stm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Jump_stm_;
  }
}

static ListStm* YY_RESULT_ListStm_ = 0;
ListStm* pListStm(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStm_;
  }
}
ListStm* pListStm(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStm_;
  }
}

static Exp* YY_RESULT_Exp_ = 0;
Exp* pExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}
Exp* pExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}

static Constant* YY_RESULT_Constant_ = 0;
Constant* pConstant(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Constant_;
  }
}
Constant* pConstant(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Constant_;
  }
}

static Constant_expression* YY_RESULT_Constant_expression_ = 0;
Constant_expression* pConstant_expression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Constant_expression_;
  }
}
Constant_expression* pConstant_expression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Constant_expression_;
  }
}

static Unary_operator* YY_RESULT_Unary_operator_ = 0;
Unary_operator* pUnary_operator(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Unary_operator_;
  }
}
Unary_operator* pUnary_operator(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Unary_operator_;
  }
}

static ListExp* YY_RESULT_ListExp_ = 0;
ListExp* pListExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExp_;
  }
}
ListExp* pListExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExp_;
  }
}

static Assignment_op* YY_RESULT_Assignment_op_ = 0;
Assignment_op* pAssignment_op(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Assignment_op_;
  }
}
Assignment_op* pAssignment_op(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Assignment_op_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Program* program_;
  ListExternal_declaration* listexternal_declaration_;
  External_declaration* external_declaration_;
  Function_def* function_def_;
  Dec* dec_;
  ListDec* listdec_;
  ListDeclaration_specifier* listdeclaration_specifier_;
  Declaration_specifier* declaration_specifier_;
  ListInit_declarator* listinit_declarator_;
  Init_declarator* init_declarator_;
  Type_specifier* type_specifier_;
  Storage_class_specifier* storage_class_specifier_;
  Type_qualifier* type_qualifier_;
  Struct_or_union_spec* struct_or_union_spec_;
  Struct_or_union* struct_or_union_;
  ListStruct_dec* liststruct_dec_;
  Struct_dec* struct_dec_;
  ListSpec_qual* listspec_qual_;
  Spec_qual* spec_qual_;
  ListStruct_declarator* liststruct_declarator_;
  Struct_declarator* struct_declarator_;
  Enum_specifier* enum_specifier_;
  ListEnumerator* listenumerator_;
  Enumerator* enumerator_;
  Declarator* declarator_;
  Direct_declarator* direct_declarator_;
  Pointer* pointer_;
  ListType_qualifier* listtype_qualifier_;
  Parameter_type* parameter_type_;
  Parameter_declarations* parameter_declarations_;
  Parameter_declaration* parameter_declaration_;
  ListIdent* listident_;
  Initializer* initializer_;
  Initializers* initializers_;
  Type_name* type_name_;
  Abstract_declarator* abstract_declarator_;
  Dir_abs_dec* dir_abs_dec_;
  Stm* stm_;
  Labeled_stm* labeled_stm_;
  Compound_stm* compound_stm_;
  Expression_stm* expression_stm_;
  Selection_stm* selection_stm_;
  Iter_stm* iter_stm_;
  Jump_stm* jump_stm_;
  ListStm* liststm_;
  Exp* exp_;
  Constant* constant_;
  Constant_expression* constant_expression_;
  Unary_operator* unary_operator_;
  ListExp* listexp_;
  Assignment_op* assignment_op_;

}


%token _ERROR_
%token _SYMB_0    //   ;
%token _SYMB_1    //   ,
%token _SYMB_2    //   =
%token _SYMB_3    //   {
%token _SYMB_4    //   }
%token _SYMB_5    //   :
%token _SYMB_6    //   (
%token _SYMB_7    //   )
%token _SYMB_8    //   [
%token _SYMB_9    //   ]
%token _SYMB_10    //   *
%token _SYMB_11    //   ...
%token _SYMB_12    //   ?
%token _SYMB_13    //   ||
%token _SYMB_14    //   &&
%token _SYMB_15    //   |
%token _SYMB_16    //   ^
%token _SYMB_17    //   &
%token _SYMB_18    //   ==
%token _SYMB_19    //   !=
%token _SYMB_20    //   <
%token _SYMB_21    //   >
%token _SYMB_22    //   <=
%token _SYMB_23    //   >=
%token _SYMB_24    //   <<
%token _SYMB_25    //   >>
%token _SYMB_26    //   +
%token _SYMB_27    //   -
%token _SYMB_28    //   /
%token _SYMB_29    //   %
%token _SYMB_30    //   ++
%token _SYMB_31    //   --
%token _SYMB_32    //   .
%token _SYMB_33    //   ->
%token _SYMB_34    //   ~
%token _SYMB_35    //   !
%token _SYMB_36    //   *=
%token _SYMB_37    //   /=
%token _SYMB_38    //   %=
%token _SYMB_39    //   +=
%token _SYMB_40    //   -=
%token _SYMB_41    //   <<=
%token _SYMB_42    //   >>=
%token _SYMB_43    //   &=
%token _SYMB_44    //   ^=
%token _SYMB_45    //   |=
%token _SYMB_46    //   Typedef_name
%token _SYMB_47    //   auto
%token _SYMB_48    //   break
%token _SYMB_49    //   case
%token _SYMB_50    //   char
%token _SYMB_51    //   const
%token _SYMB_52    //   continue
%token _SYMB_53    //   default
%token _SYMB_54    //   do
%token _SYMB_55    //   double
%token _SYMB_56    //   else
%token _SYMB_57    //   enum
%token _SYMB_58    //   extern
%token _SYMB_59    //   float
%token _SYMB_60    //   for
%token _SYMB_61    //   goto
%token _SYMB_62    //   if
%token _SYMB_63    //   int
%token _SYMB_64    //   long
%token _SYMB_65    //   register
%token _SYMB_66    //   return
%token _SYMB_67    //   short
%token _SYMB_68    //   signed
%token _SYMB_69    //   sizeof
%token _SYMB_70    //   static
%token _SYMB_71    //   struct
%token _SYMB_72    //   switch
%token _SYMB_73    //   typedef
%token _SYMB_74    //   union
%token _SYMB_75    //   unsigned
%token _SYMB_76    //   void
%token _SYMB_77    //   volatile
%token _SYMB_78    //   while
%token<string_> _SYMB_79    //   Unsigned
%token<string_> _SYMB_80    //   Long
%token<string_> _SYMB_81    //   UnsignedLong
%token<string_> _SYMB_82    //   Hexadecimal
%token<string_> _SYMB_83    //   HexUnsigned
%token<string_> _SYMB_84    //   HexLong
%token<string_> _SYMB_85    //   HexUnsLong
%token<string_> _SYMB_86    //   Octal
%token<string_> _SYMB_87    //   OctalUnsigned
%token<string_> _SYMB_88    //   OctalLong
%token<string_> _SYMB_89    //   OctalUnsLong
%token<string_> _SYMB_90    //   CDouble
%token<string_> _SYMB_91    //   CFloat
%token<string_> _SYMB_92    //   CLongDouble

%type <program_> Program
%type <listexternal_declaration_> ListExternal_declaration
%type <external_declaration_> External_declaration
%type <function_def_> Function_def
%type <dec_> Dec
%type <listdec_> ListDec
%type <listdeclaration_specifier_> ListDeclaration_specifier
%type <declaration_specifier_> Declaration_specifier
%type <listinit_declarator_> ListInit_declarator
%type <init_declarator_> Init_declarator
%type <type_specifier_> Type_specifier
%type <storage_class_specifier_> Storage_class_specifier
%type <type_qualifier_> Type_qualifier
%type <struct_or_union_spec_> Struct_or_union_spec
%type <struct_or_union_> Struct_or_union
%type <liststruct_dec_> ListStruct_dec
%type <struct_dec_> Struct_dec
%type <listspec_qual_> ListSpec_qual
%type <spec_qual_> Spec_qual
%type <liststruct_declarator_> ListStruct_declarator
%type <struct_declarator_> Struct_declarator
%type <enum_specifier_> Enum_specifier
%type <listenumerator_> ListEnumerator
%type <enumerator_> Enumerator
%type <declarator_> Declarator
%type <direct_declarator_> Direct_declarator
%type <pointer_> Pointer
%type <listtype_qualifier_> ListType_qualifier
%type <parameter_type_> Parameter_type
%type <parameter_declarations_> Parameter_declarations
%type <parameter_declaration_> Parameter_declaration
%type <listident_> ListIdent
%type <initializer_> Initializer
%type <initializers_> Initializers
%type <type_name_> Type_name
%type <abstract_declarator_> Abstract_declarator
%type <dir_abs_dec_> Dir_abs_dec
%type <stm_> Stm
%type <labeled_stm_> Labeled_stm
%type <compound_stm_> Compound_stm
%type <expression_stm_> Expression_stm
%type <selection_stm_> Selection_stm
%type <iter_stm_> Iter_stm
%type <jump_stm_> Jump_stm
%type <liststm_> ListStm
%type <exp_> Exp
%type <exp_> Exp2
%type <exp_> Exp3
%type <exp_> Exp4
%type <exp_> Exp5
%type <exp_> Exp6
%type <exp_> Exp7
%type <exp_> Exp8
%type <exp_> Exp9
%type <exp_> Exp10
%type <exp_> Exp11
%type <exp_> Exp12
%type <exp_> Exp13
%type <exp_> Exp14
%type <exp_> Exp15
%type <exp_> Exp16
%type <exp_> Exp17
%type <constant_> Constant
%type <constant_expression_> Constant_expression
%type <unary_operator_> Unary_operator
%type <listexp_> ListExp2
%type <assignment_op_> Assignment_op

%token<string_> _STRING_
%token<char_> _CHAR_
%token<int_> _INTEGER_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%%
Program : ListExternal_declaration {  std::reverse($1->begin(),$1->end()) ;$$ = new Progr($1); YY_RESULT_Program_= $$; } 
;
ListExternal_declaration : External_declaration {  $$ = new ListExternal_declaration() ; $$->push_back($1);  } 
  | External_declaration ListExternal_declaration {  $2->push_back($1) ; $$ = $2 ;  }
;
External_declaration : Function_def {  $$ = new Afunc($1);  } 
  | Dec {  $$ = new Global($1);  }
;
Function_def : ListDeclaration_specifier Declarator ListDec Compound_stm {  std::reverse($1->begin(),$1->end()) ; std::reverse($3->begin(),$3->end()) ;$$ = new OldFunc($1, $2, $3, $4);  } 
  | ListDeclaration_specifier Declarator Compound_stm {  std::reverse($1->begin(),$1->end()) ;$$ = new NewFunc($1, $2, $3);  }
  | Declarator ListDec Compound_stm {  std::reverse($2->begin(),$2->end()) ;$$ = new OldFuncInt($1, $2, $3);  }
  | Declarator Compound_stm {  $$ = new NewFuncInt($1, $2);  }
;
Dec : ListDeclaration_specifier _SYMB_0 {  std::reverse($1->begin(),$1->end()) ;$$ = new NoDeclarator($1);  } 
  | ListDeclaration_specifier ListInit_declarator _SYMB_0 {  std::reverse($1->begin(),$1->end()) ; std::reverse($2->begin(),$2->end()) ;$$ = new Declarators($1, $2);  }
;
ListDec : Dec {  $$ = new ListDec() ; $$->push_back($1);  } 
  | Dec ListDec {  $2->push_back($1) ; $$ = $2 ;  }
;
ListDeclaration_specifier : Declaration_specifier {  $$ = new ListDeclaration_specifier() ; $$->push_back($1);  } 
  | Declaration_specifier ListDeclaration_specifier {  $2->push_back($1) ; $$ = $2 ;  }
;
Declaration_specifier : Type_specifier {  $$ = new Type($1);  } 
  | Storage_class_specifier {  $$ = new Storage($1);  }
  | Type_qualifier {  $$ = new SpecProp($1);  }
;
ListInit_declarator : Init_declarator {  $$ = new ListInit_declarator() ; $$->push_back($1);  } 
  | Init_declarator _SYMB_1 ListInit_declarator {  $3->push_back($1) ; $$ = $3 ;  }
;
Init_declarator : Declarator {  $$ = new OnlyDecl($1);  } 
  | Declarator _SYMB_2 Initializer {  $$ = new InitDecl($1, $3);  }
;
Type_specifier : _SYMB_76 {  $$ = new Tvoid();  } 
  | _SYMB_50 {  $$ = new Tchar();  }
  | _SYMB_67 {  $$ = new Tshort();  }
  | _SYMB_63 {  $$ = new Tint();  }
  | _SYMB_64 {  $$ = new Tlong();  }
  | _SYMB_59 {  $$ = new Tfloat();  }
  | _SYMB_55 {  $$ = new Tdouble();  }
  | _SYMB_68 {  $$ = new Tsigned();  }
  | _SYMB_75 {  $$ = new Tunsigned();  }
  | Struct_or_union_spec {  $$ = new Tstruct($1);  }
  | Enum_specifier {  $$ = new Tenum($1);  }
  | _SYMB_46 {  $$ = new Tname();  }
;
Storage_class_specifier : _SYMB_73 {  $$ = new MyType();  } 
  | _SYMB_58 {  $$ = new GlobalPrograms();  }
  | _SYMB_70 {  $$ = new LocalProgram();  }
  | _SYMB_47 {  $$ = new LocalBlock();  }
  | _SYMB_65 {  $$ = new LocalReg();  }
;
Type_qualifier : _SYMB_51 {  $$ = new Const();  } 
  | _SYMB_77 {  $$ = new NoOptim();  }
;
Struct_or_union_spec : Struct_or_union _IDENT_ _SYMB_3 ListStruct_dec _SYMB_4 {  std::reverse($4->begin(),$4->end()) ;$$ = new Tag($1, $2, $4);  } 
  | Struct_or_union _SYMB_3 ListStruct_dec _SYMB_4 {  std::reverse($3->begin(),$3->end()) ;$$ = new Unique($1, $3);  }
  | Struct_or_union _IDENT_ {  $$ = new TagType($1, $2);  }
;
Struct_or_union : _SYMB_71 {  $$ = new Struct();  } 
  | _SYMB_74 {  $$ = new Union();  }
;
ListStruct_dec : Struct_dec {  $$ = new ListStruct_dec() ; $$->push_back($1);  } 
  | Struct_dec ListStruct_dec {  $2->push_back($1) ; $$ = $2 ;  }
;
Struct_dec : ListSpec_qual ListStruct_declarator _SYMB_0 {  std::reverse($1->begin(),$1->end()) ; std::reverse($2->begin(),$2->end()) ;$$ = new Structen($1, $2);  } 
;
ListSpec_qual : Spec_qual {  $$ = new ListSpec_qual() ; $$->push_back($1);  } 
  | Spec_qual ListSpec_qual {  $2->push_back($1) ; $$ = $2 ;  }
;
Spec_qual : Type_specifier {  $$ = new TypeSpec($1);  } 
  | Type_qualifier {  $$ = new QualSpec($1);  }
;
ListStruct_declarator : Struct_declarator {  $$ = new ListStruct_declarator() ; $$->push_back($1);  } 
  | Struct_declarator _SYMB_1 ListStruct_declarator {  $3->push_back($1) ; $$ = $3 ;  }
;
Struct_declarator : Declarator {  $$ = new Decl($1);  } 
  | _SYMB_5 Constant_expression {  $$ = new Field($2);  }
  | Declarator _SYMB_5 Constant_expression {  $$ = new DecField($1, $3);  }
;
Enum_specifier : _SYMB_57 _SYMB_3 ListEnumerator _SYMB_4 {  std::reverse($3->begin(),$3->end()) ;$$ = new EnumDec($3);  } 
  | _SYMB_57 _IDENT_ _SYMB_3 ListEnumerator _SYMB_4 {  std::reverse($4->begin(),$4->end()) ;$$ = new EnumName($2, $4);  }
  | _SYMB_57 _IDENT_ {  $$ = new EnumVar($2);  }
;
ListEnumerator : Enumerator {  $$ = new ListEnumerator() ; $$->push_back($1);  } 
  | Enumerator _SYMB_1 ListEnumerator {  $3->push_back($1) ; $$ = $3 ;  }
;
Enumerator : _IDENT_ {  $$ = new Plain($1);  } 
  | _IDENT_ _SYMB_2 Constant_expression {  $$ = new EnumInit($1, $3);  }
;
Declarator : Pointer Direct_declarator {  $$ = new BeginPointer($1, $2);  } 
  | Direct_declarator {  $$ = new NoPointer($1);  }
;
Direct_declarator : _IDENT_ {  $$ = new Name($1);  } 
  | _SYMB_6 Declarator _SYMB_7 {  $$ = new ParenDecl($2);  }
  | Direct_declarator _SYMB_8 Constant_expression _SYMB_9 {  $$ = new InnitArray($1, $3);  }
  | Direct_declarator _SYMB_8 _SYMB_9 {  $$ = new Incomplete($1);  }
  | Direct_declarator _SYMB_6 Parameter_type _SYMB_7 {  $$ = new NewFuncDec($1, $3);  }
  | Direct_declarator _SYMB_6 ListIdent _SYMB_7 {  std::reverse($3->begin(),$3->end()) ;$$ = new OldFuncDef($1, $3);  }
  | Direct_declarator _SYMB_6 _SYMB_7 {  $$ = new OldFuncDec($1);  }
;
Pointer : _SYMB_10 {  $$ = new Point();  } 
  | _SYMB_10 ListType_qualifier {  std::reverse($2->begin(),$2->end()) ;$$ = new PointQual($2);  }
  | _SYMB_10 Pointer {  $$ = new PointPoint($2);  }
  | _SYMB_10 ListType_qualifier Pointer {  std::reverse($2->begin(),$2->end()) ;$$ = new PointQualPoint($2, $3);  }
;
ListType_qualifier : Type_qualifier {  $$ = new ListType_qualifier() ; $$->push_back($1);  } 
  | Type_qualifier ListType_qualifier {  $2->push_back($1) ; $$ = $2 ;  }
;
Parameter_type : Parameter_declarations {  $$ = new AllSpec($1);  } 
  | Parameter_declarations _SYMB_1 _SYMB_11 {  $$ = new More($1);  }
;
Parameter_declarations : Parameter_declaration {  $$ = new ParamDec($1);  } 
  | Parameter_declarations _SYMB_1 Parameter_declaration {  $$ = new MoreParamDec($1, $3);  }
;
Parameter_declaration : ListDeclaration_specifier {  std::reverse($1->begin(),$1->end()) ;$$ = new OnlyType($1);  } 
  | ListDeclaration_specifier Declarator {  std::reverse($1->begin(),$1->end()) ;$$ = new TypeAndParam($1, $2);  }
  | ListDeclaration_specifier Abstract_declarator {  std::reverse($1->begin(),$1->end()) ;$$ = new Abstract($1, $2);  }
;
ListIdent : _IDENT_ {  $$ = new ListIdent() ; $$->push_back($1);  } 
  | _IDENT_ _SYMB_1 ListIdent {  $3->push_back($1) ; $$ = $3 ;  }
;
Initializer : Exp2 {  $$ = new InitExpr($1);  } 
  | _SYMB_3 Initializers _SYMB_4 {  $$ = new InitListOne($2);  }
  | _SYMB_3 Initializers _SYMB_1 _SYMB_4 {  $$ = new InitListTwo($2);  }
;
Initializers : Initializer {  $$ = new AnInit($1);  } 
  | Initializers _SYMB_1 Initializer {  $$ = new MoreInit($1, $3);  }
;
Type_name : ListSpec_qual {  std::reverse($1->begin(),$1->end()) ;$$ = new PlainType($1);  } 
  | ListSpec_qual Abstract_declarator {  std::reverse($1->begin(),$1->end()) ;$$ = new ExtendedType($1, $2);  }
;
Abstract_declarator : Pointer {  $$ = new PointerStart($1);  } 
  | Dir_abs_dec {  $$ = new Advanced($1);  }
  | Pointer Dir_abs_dec {  $$ = new PointAdvanced($1, $2);  }
;
Dir_abs_dec : _SYMB_6 Abstract_declarator _SYMB_7 {  $$ = new WithinParentes($2);  } 
  | _SYMB_8 _SYMB_9 {  $$ = new Array();  }
  | _SYMB_8 Constant_expression _SYMB_9 {  $$ = new InitiatedArray($2);  }
  | Dir_abs_dec _SYMB_8 _SYMB_9 {  $$ = new UnInitiated($1);  }
  | Dir_abs_dec _SYMB_8 Constant_expression _SYMB_9 {  $$ = new Initiated($1, $3);  }
  | _SYMB_6 _SYMB_7 {  $$ = new OldFunction();  }
  | _SYMB_6 Parameter_type _SYMB_7 {  $$ = new NewFunction($2);  }
  | Dir_abs_dec _SYMB_6 _SYMB_7 {  $$ = new OldFuncExpr($1);  }
  | Dir_abs_dec _SYMB_6 Parameter_type _SYMB_7 {  $$ = new NewFuncExpr($1, $3);  }
;
Stm : Labeled_stm {  $$ = new LabelS($1); YY_RESULT_Stm_= $$; } 
  | Compound_stm {  $$ = new CompS($1); YY_RESULT_Stm_= $$; }
  | Expression_stm {  $$ = new ExprS($1); YY_RESULT_Stm_= $$; }
  | Selection_stm {  $$ = new SelS($1); YY_RESULT_Stm_= $$; }
  | Iter_stm {  $$ = new IterS($1); YY_RESULT_Stm_= $$; }
  | Jump_stm {  $$ = new JumpS($1); YY_RESULT_Stm_= $$; }
;
Labeled_stm : _IDENT_ _SYMB_5 Stm {  $$ = new SlabelOne($1, $3);  } 
  | _SYMB_49 Constant_expression _SYMB_5 Stm {  $$ = new SlabelTwo($2, $4);  }
  | _SYMB_53 _SYMB_5 Stm {  $$ = new SlabelThree($3);  }
;
Compound_stm : _SYMB_3 _SYMB_4 {  $$ = new ScompOne();  } 
  | _SYMB_3 ListStm _SYMB_4 {  std::reverse($2->begin(),$2->end()) ;$$ = new ScompTwo($2);  }
  | _SYMB_3 ListDec _SYMB_4 {  std::reverse($2->begin(),$2->end()) ;$$ = new ScompThree($2);  }
  | _SYMB_3 ListDec ListStm _SYMB_4 {  std::reverse($2->begin(),$2->end()) ; std::reverse($3->begin(),$3->end()) ;$$ = new ScompFour($2, $3);  }
;
Expression_stm : _SYMB_0 {  $$ = new SexprOne();  } 
  | Exp _SYMB_0 {  $$ = new SexprTwo($1);  }
;
Selection_stm : _SYMB_62 _SYMB_6 Exp _SYMB_7 Stm {  $$ = new SselOne($3, $5);  } 
  | _SYMB_62 _SYMB_6 Exp _SYMB_7 Stm _SYMB_56 Stm {  $$ = new SselTwo($3, $5, $7);  }
  | _SYMB_72 _SYMB_6 Exp _SYMB_7 Stm {  $$ = new SselThree($3, $5);  }
;
Iter_stm : _SYMB_78 _SYMB_6 Exp _SYMB_7 Stm {  $$ = new SiterOne($3, $5);  } 
  | _SYMB_54 Stm _SYMB_78 _SYMB_6 Exp _SYMB_7 _SYMB_0 {  $$ = new SiterTwo($2, $5);  }
  | _SYMB_60 _SYMB_6 Expression_stm Expression_stm _SYMB_7 Stm {  $$ = new SiterThree($3, $4, $6);  }
  | _SYMB_60 _SYMB_6 Expression_stm Expression_stm Exp _SYMB_7 Stm {  $$ = new SiterFour($3, $4, $5, $7);  }
;
Jump_stm : _SYMB_61 _IDENT_ _SYMB_0 {  $$ = new SjumpOne($2);  } 
  | _SYMB_52 _SYMB_0 {  $$ = new SjumpTwo();  }
  | _SYMB_48 _SYMB_0 {  $$ = new SjumpThree();  }
  | _SYMB_66 _SYMB_0 {  $$ = new SjumpFour();  }
  | _SYMB_66 Exp _SYMB_0 {  $$ = new SjumpFive($2);  }
;
ListStm : Stm {  $$ = new ListStm() ; $$->push_back($1);  } 
  | Stm ListStm {  $2->push_back($1) ; $$ = $2 ;  }
;
Exp : Exp _SYMB_1 Exp2 {  $$ = new Ecomma($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp2 {  $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp2 : Exp15 Assignment_op Exp2 {  $$ = new Eassign($1, $2, $3);  } 
  | Exp3 {  $$ = $1;  }
;
Exp3 : Exp4 _SYMB_12 Exp _SYMB_5 Exp3 {  $$ = new Econdition($1, $3, $5);  } 
  | Exp4 {  $$ = $1;  }
;
Exp4 : Exp4 _SYMB_13 Exp5 {  $$ = new Elor($1, $3);  } 
  | Exp5 {  $$ = $1;  }
;
Exp5 : Exp5 _SYMB_14 Exp6 {  $$ = new Eland($1, $3);  } 
  | Exp6 {  $$ = $1;  }
;
Exp6 : Exp6 _SYMB_15 Exp7 {  $$ = new Ebitor($1, $3);  } 
  | Exp7 {  $$ = $1;  }
;
Exp7 : Exp7 _SYMB_16 Exp8 {  $$ = new Ebitexor($1, $3);  } 
  | Exp8 {  $$ = $1;  }
;
Exp8 : Exp8 _SYMB_17 Exp9 {  $$ = new Ebitand($1, $3);  } 
  | Exp9 {  $$ = $1;  }
;
Exp9 : Exp9 _SYMB_18 Exp10 {  $$ = new Eeq($1, $3);  } 
  | Exp9 _SYMB_19 Exp10 {  $$ = new Eneq($1, $3);  }
  | Exp10 {  $$ = $1;  }
;
Exp10 : Exp10 _SYMB_20 Exp11 {  $$ = new Elthen($1, $3);  } 
  | Exp10 _SYMB_21 Exp11 {  $$ = new Egrthen($1, $3);  }
  | Exp10 _SYMB_22 Exp11 {  $$ = new Ele($1, $3);  }
  | Exp10 _SYMB_23 Exp11 {  $$ = new Ege($1, $3);  }
  | Exp11 {  $$ = $1;  }
;
Exp11 : Exp11 _SYMB_24 Exp12 {  $$ = new Eleft($1, $3);  } 
  | Exp11 _SYMB_25 Exp12 {  $$ = new Eright($1, $3);  }
  | Exp12 {  $$ = $1;  }
;
Exp12 : Exp12 _SYMB_26 Exp13 {  $$ = new Eplus($1, $3);  } 
  | Exp12 _SYMB_27 Exp13 {  $$ = new Eminus($1, $3);  }
  | Exp13 {  $$ = $1;  }
;
Exp13 : Exp13 _SYMB_10 Exp14 {  $$ = new Etimes($1, $3);  } 
  | Exp13 _SYMB_28 Exp14 {  $$ = new Ediv($1, $3);  }
  | Exp13 _SYMB_29 Exp14 {  $$ = new Emod($1, $3);  }
  | Exp14 {  $$ = $1;  }
;
Exp14 : _SYMB_6 Type_name _SYMB_7 Exp14 {  $$ = new Etypeconv($2, $4);  } 
  | Exp15 {  $$ = $1;  }
;
Exp15 : _SYMB_30 Exp15 {  $$ = new Epreinc($2);  } 
  | _SYMB_31 Exp15 {  $$ = new Epredec($2);  }
  | Unary_operator Exp14 {  $$ = new Epreop($1, $2);  }
  | _SYMB_69 Exp15 {  $$ = new Ebytesexpr($2);  }
  | _SYMB_69 _SYMB_6 Type_name _SYMB_7 {  $$ = new Ebytestype($3);  }
  | Exp16 {  $$ = $1;  }
;
Exp16 : Exp16 _SYMB_8 Exp _SYMB_9 {  $$ = new Earray($1, $3);  } 
  | Exp16 _SYMB_6 _SYMB_7 {  $$ = new Efunk($1);  }
  | Exp16 _SYMB_6 ListExp2 _SYMB_7 {  std::reverse($3->begin(),$3->end()) ;$$ = new Efunkpar($1, $3);  }
  | Exp16 _SYMB_32 _IDENT_ {  $$ = new Eselect($1, $3);  }
  | Exp16 _SYMB_33 _IDENT_ {  $$ = new Epoint($1, $3);  }
  | Exp16 _SYMB_30 {  $$ = new Epostinc($1);  }
  | Exp16 _SYMB_31 {  $$ = new Epostdec($1);  }
  | Exp17 {  $$ = $1;  }
;
Exp17 : _IDENT_ {  $$ = new Evar($1);  } 
  | Constant {  $$ = new Econst($1);  }
  | _STRING_ {  $$ = new Estring($1);  }
  | _SYMB_6 Exp _SYMB_7 {  $$ = $2;  }
;
Constant : _DOUBLE_ {  $$ = new Efloat($1);  } 
  | _CHAR_ {  $$ = new Echar($1);  }
  | _SYMB_79 {  $$ = new Eunsigned($1);  }
  | _SYMB_80 {  $$ = new Elong($1);  }
  | _SYMB_81 {  $$ = new Eunsignlong($1);  }
  | _SYMB_82 {  $$ = new Ehexadec($1);  }
  | _SYMB_83 {  $$ = new Ehexaunsign($1);  }
  | _SYMB_84 {  $$ = new Ehexalong($1);  }
  | _SYMB_85 {  $$ = new Ehexaunslong($1);  }
  | _SYMB_86 {  $$ = new Eoctal($1);  }
  | _SYMB_87 {  $$ = new Eoctalunsign($1);  }
  | _SYMB_88 {  $$ = new Eoctallong($1);  }
  | _SYMB_89 {  $$ = new Eoctalunslong($1);  }
  | _SYMB_90 {  $$ = new Ecdouble($1);  }
  | _SYMB_91 {  $$ = new Ecfloat($1);  }
  | _SYMB_92 {  $$ = new Eclongdouble($1);  }
  | _INTEGER_ {  $$ = new Eint($1);  }
;
Constant_expression : Exp3 {  $$ = new Especial($1);  } 
;
Unary_operator : _SYMB_17 {  $$ = new Address();  } 
  | _SYMB_10 {  $$ = new Indirection();  }
  | _SYMB_26 {  $$ = new Plus();  }
  | _SYMB_27 {  $$ = new Negative();  }
  | _SYMB_34 {  $$ = new Complement();  }
  | _SYMB_35 {  $$ = new Logicalneg();  }
;
ListExp2 : Exp2 {  $$ = new ListExp() ; $$->push_back($1);  } 
  | Exp2 _SYMB_1 ListExp2 {  $3->push_back($1) ; $$ = $3 ;  }
;
Assignment_op : _SYMB_2 {  $$ = new Assign();  } 
  | _SYMB_36 {  $$ = new AssignMul();  }
  | _SYMB_37 {  $$ = new AssignDiv();  }
  | _SYMB_38 {  $$ = new AssignMod();  }
  | _SYMB_39 {  $$ = new AssignAdd();  }
  | _SYMB_40 {  $$ = new AssignSub();  }
  | _SYMB_41 {  $$ = new AssignLeft();  }
  | _SYMB_42 {  $$ = new AssignRight();  }
  | _SYMB_43 {  $$ = new AssignAnd();  }
  | _SYMB_44 {  $$ = new AssignXor();  }
  | _SYMB_45 {  $$ = new AssignOr();  }
;

