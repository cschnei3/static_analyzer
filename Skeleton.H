#ifndef SKELETON_HEADER
#define SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"


class Skeleton : public Visitor
{
public:
  void visitProgram(Program* p);
  void visitExternal_declaration(External_declaration* p);
  void visitFunction_def(Function_def* p);
  void visitDec(Dec* p);
  void visitDeclaration_specifier(Declaration_specifier* p);
  void visitInit_declarator(Init_declarator* p);
  void visitType_specifier(Type_specifier* p);
  void visitStorage_class_specifier(Storage_class_specifier* p);
  void visitType_qualifier(Type_qualifier* p);
  void visitStruct_or_union_spec(Struct_or_union_spec* p);
  void visitStruct_or_union(Struct_or_union* p);
  void visitStruct_dec(Struct_dec* p);
  void visitSpec_qual(Spec_qual* p);
  void visitStruct_declarator(Struct_declarator* p);
  void visitEnum_specifier(Enum_specifier* p);
  void visitEnumerator(Enumerator* p);
  void visitDeclarator(Declarator* p);
  void visitDirect_declarator(Direct_declarator* p);
  void visitPointer(Pointer* p);
  void visitParameter_type(Parameter_type* p);
  void visitParameter_declarations(Parameter_declarations* p);
  void visitParameter_declaration(Parameter_declaration* p);
  void visitInitializer(Initializer* p);
  void visitInitializers(Initializers* p);
  void visitType_name(Type_name* p);
  void visitAbstract_declarator(Abstract_declarator* p);
  void visitDir_abs_dec(Dir_abs_dec* p);
  void visitStm(Stm* p);
  void visitLabeled_stm(Labeled_stm* p);
  void visitCompound_stm(Compound_stm* p);
  void visitExpression_stm(Expression_stm* p);
  void visitSelection_stm(Selection_stm* p);
  void visitIter_stm(Iter_stm* p);
  void visitJump_stm(Jump_stm* p);
  void visitExp(Exp* p);
  void visitConstant(Constant* p);
  void visitConstant_expression(Constant_expression* p);
  void visitUnary_operator(Unary_operator* p);
  void visitAssignment_op(Assignment_op* p);
  void visitProgr(Progr* p);
  void visitAfunc(Afunc* p);
  void visitGlobal(Global* p);
  void visitOldFunc(OldFunc* p);
  void visitNewFunc(NewFunc* p);
  void visitOldFuncInt(OldFuncInt* p);
  void visitNewFuncInt(NewFuncInt* p);
  void visitNoDeclarator(NoDeclarator* p);
  void visitDeclarators(Declarators* p);
  void visitType(Type* p);
  void visitStorage(Storage* p);
  void visitSpecProp(SpecProp* p);
  void visitOnlyDecl(OnlyDecl* p);
  void visitInitDecl(InitDecl* p);
  void visitTvoid(Tvoid* p);
  void visitTchar(Tchar* p);
  void visitTshort(Tshort* p);
  void visitTint(Tint* p);
  void visitTlong(Tlong* p);
  void visitTfloat(Tfloat* p);
  void visitTdouble(Tdouble* p);
  void visitTsigned(Tsigned* p);
  void visitTunsigned(Tunsigned* p);
  void visitTstruct(Tstruct* p);
  void visitTenum(Tenum* p);
  void visitTname(Tname* p);
  void visitMyType(MyType* p);
  void visitGlobalPrograms(GlobalPrograms* p);
  void visitLocalProgram(LocalProgram* p);
  void visitLocalBlock(LocalBlock* p);
  void visitLocalReg(LocalReg* p);
  void visitConst(Const* p);
  void visitNoOptim(NoOptim* p);
  void visitTag(Tag* p);
  void visitUnique(Unique* p);
  void visitTagType(TagType* p);
  void visitStruct(Struct* p);
  void visitUnion(Union* p);
  void visitStructen(Structen* p);
  void visitTypeSpec(TypeSpec* p);
  void visitQualSpec(QualSpec* p);
  void visitDecl(Decl* p);
  void visitField(Field* p);
  void visitDecField(DecField* p);
  void visitEnumDec(EnumDec* p);
  void visitEnumName(EnumName* p);
  void visitEnumVar(EnumVar* p);
  void visitPlain(Plain* p);
  void visitEnumInit(EnumInit* p);
  void visitBeginPointer(BeginPointer* p);
  void visitNoPointer(NoPointer* p);
  void visitName(Name* p);
  void visitParenDecl(ParenDecl* p);
  void visitInnitArray(InnitArray* p);
  void visitIncomplete(Incomplete* p);
  void visitNewFuncDec(NewFuncDec* p);
  void visitOldFuncDef(OldFuncDef* p);
  void visitOldFuncDec(OldFuncDec* p);
  void visitPoint(Point* p);
  void visitPointQual(PointQual* p);
  void visitPointPoint(PointPoint* p);
  void visitPointQualPoint(PointQualPoint* p);
  void visitAllSpec(AllSpec* p);
  void visitMore(More* p);
  void visitParamDec(ParamDec* p);
  void visitMoreParamDec(MoreParamDec* p);
  void visitOnlyType(OnlyType* p);
  void visitTypeAndParam(TypeAndParam* p);
  void visitAbstract(Abstract* p);
  void visitInitExpr(InitExpr* p);
  void visitInitListOne(InitListOne* p);
  void visitInitListTwo(InitListTwo* p);
  void visitAnInit(AnInit* p);
  void visitMoreInit(MoreInit* p);
  void visitPlainType(PlainType* p);
  void visitExtendedType(ExtendedType* p);
  void visitPointerStart(PointerStart* p);
  void visitAdvanced(Advanced* p);
  void visitPointAdvanced(PointAdvanced* p);
  void visitWithinParentes(WithinParentes* p);
  void visitArray(Array* p);
  void visitInitiatedArray(InitiatedArray* p);
  void visitUnInitiated(UnInitiated* p);
  void visitInitiated(Initiated* p);
  void visitOldFunction(OldFunction* p);
  void visitNewFunction(NewFunction* p);
  void visitOldFuncExpr(OldFuncExpr* p);
  void visitNewFuncExpr(NewFuncExpr* p);
  void visitLabelS(LabelS* p);
  void visitCompS(CompS* p);
  void visitExprS(ExprS* p);
  void visitSelS(SelS* p);
  void visitIterS(IterS* p);
  void visitJumpS(JumpS* p);
  void visitSlabelOne(SlabelOne* p);
  void visitSlabelTwo(SlabelTwo* p);
  void visitSlabelThree(SlabelThree* p);
  void visitScompOne(ScompOne* p);
  void visitScompTwo(ScompTwo* p);
  void visitScompThree(ScompThree* p);
  void visitScompFour(ScompFour* p);
  void visitSexprOne(SexprOne* p);
  void visitSexprTwo(SexprTwo* p);
  void visitSselOne(SselOne* p);
  void visitSselTwo(SselTwo* p);
  void visitSselThree(SselThree* p);
  void visitSiterOne(SiterOne* p);
  void visitSiterTwo(SiterTwo* p);
  void visitSiterThree(SiterThree* p);
  void visitSiterFour(SiterFour* p);
  void visitSjumpOne(SjumpOne* p);
  void visitSjumpTwo(SjumpTwo* p);
  void visitSjumpThree(SjumpThree* p);
  void visitSjumpFour(SjumpFour* p);
  void visitSjumpFive(SjumpFive* p);
  void visitEcomma(Ecomma* p);
  void visitEassign(Eassign* p);
  void visitEcondition(Econdition* p);
  void visitElor(Elor* p);
  void visitEland(Eland* p);
  void visitEbitor(Ebitor* p);
  void visitEbitexor(Ebitexor* p);
  void visitEbitand(Ebitand* p);
  void visitEeq(Eeq* p);
  void visitEneq(Eneq* p);
  void visitElthen(Elthen* p);
  void visitEgrthen(Egrthen* p);
  void visitEle(Ele* p);
  void visitEge(Ege* p);
  void visitEleft(Eleft* p);
  void visitEright(Eright* p);
  void visitEplus(Eplus* p);
  void visitEminus(Eminus* p);
  void visitEtimes(Etimes* p);
  void visitEdiv(Ediv* p);
  void visitEmod(Emod* p);
  void visitEtypeconv(Etypeconv* p);
  void visitEpreinc(Epreinc* p);
  void visitEpredec(Epredec* p);
  void visitEpreop(Epreop* p);
  void visitEbytesexpr(Ebytesexpr* p);
  void visitEbytestype(Ebytestype* p);
  void visitEarray(Earray* p);
  void visitEfunk(Efunk* p);
  void visitEfunkpar(Efunkpar* p);
  void visitEselect(Eselect* p);
  void visitEpoint(Epoint* p);
  void visitEpostinc(Epostinc* p);
  void visitEpostdec(Epostdec* p);
  void visitEvar(Evar* p);
  void visitEconst(Econst* p);
  void visitEstring(Estring* p);
  void visitEfloat(Efloat* p);
  void visitEchar(Echar* p);
  void visitEunsigned(Eunsigned* p);
  void visitElong(Elong* p);
  void visitEunsignlong(Eunsignlong* p);
  void visitEhexadec(Ehexadec* p);
  void visitEhexaunsign(Ehexaunsign* p);
  void visitEhexalong(Ehexalong* p);
  void visitEhexaunslong(Ehexaunslong* p);
  void visitEoctal(Eoctal* p);
  void visitEoctalunsign(Eoctalunsign* p);
  void visitEoctallong(Eoctallong* p);
  void visitEoctalunslong(Eoctalunslong* p);
  void visitEcdouble(Ecdouble* p);
  void visitEcfloat(Ecfloat* p);
  void visitEclongdouble(Eclongdouble* p);
  void visitEint(Eint* p);
  void visitElonger(Elonger* p);
  void visitEdouble(Edouble* p);
  void visitEspecial(Especial* p);
  void visitAddress(Address* p);
  void visitIndirection(Indirection* p);
  void visitPlus(Plus* p);
  void visitNegative(Negative* p);
  void visitComplement(Complement* p);
  void visitLogicalneg(Logicalneg* p);
  void visitAssign(Assign* p);
  void visitAssignMul(AssignMul* p);
  void visitAssignDiv(AssignDiv* p);
  void visitAssignMod(AssignMod* p);
  void visitAssignAdd(AssignAdd* p);
  void visitAssignSub(AssignSub* p);
  void visitAssignLeft(AssignLeft* p);
  void visitAssignRight(AssignRight* p);
  void visitAssignAnd(AssignAnd* p);
  void visitAssignXor(AssignXor* p);
  void visitAssignOr(AssignOr* p);
  void visitListExternal_declaration(ListExternal_declaration* p);
  void visitListDec(ListDec* p);
  void visitListDeclaration_specifier(ListDeclaration_specifier* p);
  void visitListInit_declarator(ListInit_declarator* p);
  void visitListStruct_dec(ListStruct_dec* p);
  void visitListSpec_qual(ListSpec_qual* p);
  void visitListStruct_declarator(ListStruct_declarator* p);
  void visitListEnumerator(ListEnumerator* p);
  void visitListType_qualifier(ListType_qualifier* p);
  void visitListIdent(ListIdent* p);
  void visitListStm(ListStm* p);
  void visitListExp(ListExp* p);

  void visitUnsigned(Unsigned x);
  void visitLong(Long x);
  void visitUnsignedLong(UnsignedLong x);
  void visitHexadecimal(Hexadecimal x);
  void visitHexUnsigned(HexUnsigned x);
  void visitHexLong(HexLong x);
  void visitHexUnsLong(HexUnsLong x);
  void visitOctal(Octal x);
  void visitOctalUnsigned(OctalUnsigned x);
  void visitOctalLong(OctalLong x);
  void visitOctalUnsLong(OctalUnsLong x);
  void visitCDouble(CDouble x);
  void visitCFloat(CFloat x);
  void visitCLongDouble(CLongDouble x);
  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};


#endif
