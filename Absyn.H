#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string Unsigned;
typedef std::string Long;
typedef std::string UnsignedLong;
typedef std::string Hexadecimal;
typedef std::string HexUnsigned;
typedef std::string HexLong;
typedef std::string HexUnsLong;
typedef std::string Octal;
typedef std::string OctalUnsigned;
typedef std::string OctalLong;
typedef std::string OctalUnsLong;
typedef std::string CDouble;
typedef std::string CFloat;
typedef std::string CLongDouble;


/********************   Forward Declarations    ********************/

class Program;
class External_declaration;
class Function_def;
class Dec;
class Declaration_specifier;
class Init_declarator;
class Type_specifier;
class Storage_class_specifier;
class Type_qualifier;
class Struct_or_union_spec;
class Struct_or_union;
class Struct_dec;
class Spec_qual;
class Struct_declarator;
class Enum_specifier;
class Enumerator;
class Declarator;
class Direct_declarator;
class Pointer;
class Parameter_type;
class Parameter_declarations;
class Parameter_declaration;
class Initializer;
class Initializers;
class Type_name;
class Abstract_declarator;
class Dir_abs_dec;
class Stm;
class Labeled_stm;
class Compound_stm;
class Expression_stm;
class Selection_stm;
class Iter_stm;
class Jump_stm;
class Exp;
class Constant;
class Constant_expression;
class Unary_operator;
class Assignment_op;
class Progr;
class Afunc;
class Global;
class OldFunc;
class NewFunc;
class OldFuncInt;
class NewFuncInt;
class NoDeclarator;
class Declarators;
class Type;
class Storage;
class SpecProp;
class OnlyDecl;
class InitDecl;
class Tvoid;
class Tchar;
class Tshort;
class Tint;
class Tlong;
class Tfloat;
class Tdouble;
class Tsigned;
class Tunsigned;
class Tstruct;
class Tenum;
class Tname;
class MyType;
class GlobalPrograms;
class LocalProgram;
class LocalBlock;
class LocalReg;
class Const;
class NoOptim;
class Tag;
class Unique;
class TagType;
class Struct;
class Union;
class Structen;
class TypeSpec;
class QualSpec;
class Decl;
class Field;
class DecField;
class EnumDec;
class EnumName;
class EnumVar;
class Plain;
class EnumInit;
class BeginPointer;
class NoPointer;
class Name;
class ParenDecl;
class InnitArray;
class Incomplete;
class NewFuncDec;
class OldFuncDef;
class OldFuncDec;
class Point;
class PointQual;
class PointPoint;
class PointQualPoint;
class AllSpec;
class More;
class ParamDec;
class MoreParamDec;
class OnlyType;
class TypeAndParam;
class Abstract;
class InitExpr;
class InitListOne;
class InitListTwo;
class AnInit;
class MoreInit;
class PlainType;
class ExtendedType;
class PointerStart;
class Advanced;
class PointAdvanced;
class WithinParentes;
class Array;
class InitiatedArray;
class UnInitiated;
class Initiated;
class OldFunction;
class NewFunction;
class OldFuncExpr;
class NewFuncExpr;
class LabelS;
class CompS;
class ExprS;
class SelS;
class IterS;
class JumpS;
class SlabelOne;
class SlabelTwo;
class SlabelThree;
class ScompOne;
class ScompTwo;
class ScompThree;
class ScompFour;
class SexprOne;
class SexprTwo;
class SselOne;
class SselTwo;
class SselThree;
class SiterOne;
class SiterTwo;
class SiterThree;
class SiterFour;
class SjumpOne;
class SjumpTwo;
class SjumpThree;
class SjumpFour;
class SjumpFive;
class Ecomma;
class Eassign;
class Econdition;
class Elor;
class Eland;
class Ebitor;
class Ebitexor;
class Ebitand;
class Eeq;
class Eneq;
class Elthen;
class Egrthen;
class Ele;
class Ege;
class Eleft;
class Eright;
class Eplus;
class Eminus;
class Etimes;
class Ediv;
class Emod;
class Etypeconv;
class Epreinc;
class Epredec;
class Epreop;
class Ebytesexpr;
class Ebytestype;
class Earray;
class Efunk;
class Efunkpar;
class Eselect;
class Epoint;
class Epostinc;
class Epostdec;
class Evar;
class Econst;
class Estring;
class Efloat;
class Echar;
class Eunsigned;
class Elong;
class Eunsignlong;
class Ehexadec;
class Ehexaunsign;
class Ehexalong;
class Ehexaunslong;
class Eoctal;
class Eoctalunsign;
class Eoctallong;
class Eoctalunslong;
class Ecdouble;
class Ecfloat;
class Eclongdouble;
class Eint;
class Elonger;
class Edouble;
class Especial;
class Address;
class Indirection;
class Plus;
class Negative;
class Complement;
class Logicalneg;
class Assign;
class AssignMul;
class AssignDiv;
class AssignMod;
class AssignAdd;
class AssignSub;
class AssignLeft;
class AssignRight;
class AssignAnd;
class AssignXor;
class AssignOr;
class ListExternal_declaration;
class ListDec;
class ListDeclaration_specifier;
class ListInit_declarator;
class ListStruct_dec;
class ListSpec_qual;
class ListStruct_declarator;
class ListEnumerator;
class ListType_qualifier;
class ListIdent;
class ListStm;
class ListExp;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitExternal_declaration(External_declaration *p) = 0;
  virtual void visitFunction_def(Function_def *p) = 0;
  virtual void visitDec(Dec *p) = 0;
  virtual void visitDeclaration_specifier(Declaration_specifier *p) = 0;
  virtual void visitInit_declarator(Init_declarator *p) = 0;
  virtual void visitType_specifier(Type_specifier *p) = 0;
  virtual void visitStorage_class_specifier(Storage_class_specifier *p) = 0;
  virtual void visitType_qualifier(Type_qualifier *p) = 0;
  virtual void visitStruct_or_union_spec(Struct_or_union_spec *p) = 0;
  virtual void visitStruct_or_union(Struct_or_union *p) = 0;
  virtual void visitStruct_dec(Struct_dec *p) = 0;
  virtual void visitSpec_qual(Spec_qual *p) = 0;
  virtual void visitStruct_declarator(Struct_declarator *p) = 0;
  virtual void visitEnum_specifier(Enum_specifier *p) = 0;
  virtual void visitEnumerator(Enumerator *p) = 0;
  virtual void visitDeclarator(Declarator *p) = 0;
  virtual void visitDirect_declarator(Direct_declarator *p) = 0;
  virtual void visitPointer(Pointer *p) = 0;
  virtual void visitParameter_type(Parameter_type *p) = 0;
  virtual void visitParameter_declarations(Parameter_declarations *p) = 0;
  virtual void visitParameter_declaration(Parameter_declaration *p) = 0;
  virtual void visitInitializer(Initializer *p) = 0;
  virtual void visitInitializers(Initializers *p) = 0;
  virtual void visitType_name(Type_name *p) = 0;
  virtual void visitAbstract_declarator(Abstract_declarator *p) = 0;
  virtual void visitDir_abs_dec(Dir_abs_dec *p) = 0;
  virtual void visitStm(Stm *p) = 0;
  virtual void visitLabeled_stm(Labeled_stm *p) = 0;
  virtual void visitCompound_stm(Compound_stm *p) = 0;
  virtual void visitExpression_stm(Expression_stm *p) = 0;
  virtual void visitSelection_stm(Selection_stm *p) = 0;
  virtual void visitIter_stm(Iter_stm *p) = 0;
  virtual void visitJump_stm(Jump_stm *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitConstant(Constant *p) = 0;
  virtual void visitConstant_expression(Constant_expression *p) = 0;
  virtual void visitUnary_operator(Unary_operator *p) = 0;
  virtual void visitAssignment_op(Assignment_op *p) = 0;
  virtual void visitProgr(Progr *p) = 0;
  virtual void visitAfunc(Afunc *p) = 0;
  virtual void visitGlobal(Global *p) = 0;
  virtual void visitOldFunc(OldFunc *p) = 0;
  virtual void visitNewFunc(NewFunc *p) = 0;
  virtual void visitOldFuncInt(OldFuncInt *p) = 0;
  virtual void visitNewFuncInt(NewFuncInt *p) = 0;
  virtual void visitNoDeclarator(NoDeclarator *p) = 0;
  virtual void visitDeclarators(Declarators *p) = 0;
  virtual void visitType(Type *p) = 0;
  virtual void visitStorage(Storage *p) = 0;
  virtual void visitSpecProp(SpecProp *p) = 0;
  virtual void visitOnlyDecl(OnlyDecl *p) = 0;
  virtual void visitInitDecl(InitDecl *p) = 0;
  virtual void visitTvoid(Tvoid *p) = 0;
  virtual void visitTchar(Tchar *p) = 0;
  virtual void visitTshort(Tshort *p) = 0;
  virtual void visitTint(Tint *p) = 0;
  virtual void visitTlong(Tlong *p) = 0;
  virtual void visitTfloat(Tfloat *p) = 0;
  virtual void visitTdouble(Tdouble *p) = 0;
  virtual void visitTsigned(Tsigned *p) = 0;
  virtual void visitTunsigned(Tunsigned *p) = 0;
  virtual void visitTstruct(Tstruct *p) = 0;
  virtual void visitTenum(Tenum *p) = 0;
  virtual void visitTname(Tname *p) = 0;
  virtual void visitMyType(MyType *p) = 0;
  virtual void visitGlobalPrograms(GlobalPrograms *p) = 0;
  virtual void visitLocalProgram(LocalProgram *p) = 0;
  virtual void visitLocalBlock(LocalBlock *p) = 0;
  virtual void visitLocalReg(LocalReg *p) = 0;
  virtual void visitConst(Const *p) = 0;
  virtual void visitNoOptim(NoOptim *p) = 0;
  virtual void visitTag(Tag *p) = 0;
  virtual void visitUnique(Unique *p) = 0;
  virtual void visitTagType(TagType *p) = 0;
  virtual void visitStruct(Struct *p) = 0;
  virtual void visitUnion(Union *p) = 0;
  virtual void visitStructen(Structen *p) = 0;
  virtual void visitTypeSpec(TypeSpec *p) = 0;
  virtual void visitQualSpec(QualSpec *p) = 0;
  virtual void visitDecl(Decl *p) = 0;
  virtual void visitField(Field *p) = 0;
  virtual void visitDecField(DecField *p) = 0;
  virtual void visitEnumDec(EnumDec *p) = 0;
  virtual void visitEnumName(EnumName *p) = 0;
  virtual void visitEnumVar(EnumVar *p) = 0;
  virtual void visitPlain(Plain *p) = 0;
  virtual void visitEnumInit(EnumInit *p) = 0;
  virtual void visitBeginPointer(BeginPointer *p) = 0;
  virtual void visitNoPointer(NoPointer *p) = 0;
  virtual void visitName(Name *p) = 0;
  virtual void visitParenDecl(ParenDecl *p) = 0;
  virtual void visitInnitArray(InnitArray *p) = 0;
  virtual void visitIncomplete(Incomplete *p) = 0;
  virtual void visitNewFuncDec(NewFuncDec *p) = 0;
  virtual void visitOldFuncDef(OldFuncDef *p) = 0;
  virtual void visitOldFuncDec(OldFuncDec *p) = 0;
  virtual void visitPoint(Point *p) = 0;
  virtual void visitPointQual(PointQual *p) = 0;
  virtual void visitPointPoint(PointPoint *p) = 0;
  virtual void visitPointQualPoint(PointQualPoint *p) = 0;
  virtual void visitAllSpec(AllSpec *p) = 0;
  virtual void visitMore(More *p) = 0;
  virtual void visitParamDec(ParamDec *p) = 0;
  virtual void visitMoreParamDec(MoreParamDec *p) = 0;
  virtual void visitOnlyType(OnlyType *p) = 0;
  virtual void visitTypeAndParam(TypeAndParam *p) = 0;
  virtual void visitAbstract(Abstract *p) = 0;
  virtual void visitInitExpr(InitExpr *p) = 0;
  virtual void visitInitListOne(InitListOne *p) = 0;
  virtual void visitInitListTwo(InitListTwo *p) = 0;
  virtual void visitAnInit(AnInit *p) = 0;
  virtual void visitMoreInit(MoreInit *p) = 0;
  virtual void visitPlainType(PlainType *p) = 0;
  virtual void visitExtendedType(ExtendedType *p) = 0;
  virtual void visitPointerStart(PointerStart *p) = 0;
  virtual void visitAdvanced(Advanced *p) = 0;
  virtual void visitPointAdvanced(PointAdvanced *p) = 0;
  virtual void visitWithinParentes(WithinParentes *p) = 0;
  virtual void visitArray(Array *p) = 0;
  virtual void visitInitiatedArray(InitiatedArray *p) = 0;
  virtual void visitUnInitiated(UnInitiated *p) = 0;
  virtual void visitInitiated(Initiated *p) = 0;
  virtual void visitOldFunction(OldFunction *p) = 0;
  virtual void visitNewFunction(NewFunction *p) = 0;
  virtual void visitOldFuncExpr(OldFuncExpr *p) = 0;
  virtual void visitNewFuncExpr(NewFuncExpr *p) = 0;
  virtual void visitLabelS(LabelS *p) = 0;
  virtual void visitCompS(CompS *p) = 0;
  virtual void visitExprS(ExprS *p) = 0;
  virtual void visitSelS(SelS *p) = 0;
  virtual void visitIterS(IterS *p) = 0;
  virtual void visitJumpS(JumpS *p) = 0;
  virtual void visitSlabelOne(SlabelOne *p) = 0;
  virtual void visitSlabelTwo(SlabelTwo *p) = 0;
  virtual void visitSlabelThree(SlabelThree *p) = 0;
  virtual void visitScompOne(ScompOne *p) = 0;
  virtual void visitScompTwo(ScompTwo *p) = 0;
  virtual void visitScompThree(ScompThree *p) = 0;
  virtual void visitScompFour(ScompFour *p) = 0;
  virtual void visitSexprOne(SexprOne *p) = 0;
  virtual void visitSexprTwo(SexprTwo *p) = 0;
  virtual void visitSselOne(SselOne *p) = 0;
  virtual void visitSselTwo(SselTwo *p) = 0;
  virtual void visitSselThree(SselThree *p) = 0;
  virtual void visitSiterOne(SiterOne *p) = 0;
  virtual void visitSiterTwo(SiterTwo *p) = 0;
  virtual void visitSiterThree(SiterThree *p) = 0;
  virtual void visitSiterFour(SiterFour *p) = 0;
  virtual void visitSjumpOne(SjumpOne *p) = 0;
  virtual void visitSjumpTwo(SjumpTwo *p) = 0;
  virtual void visitSjumpThree(SjumpThree *p) = 0;
  virtual void visitSjumpFour(SjumpFour *p) = 0;
  virtual void visitSjumpFive(SjumpFive *p) = 0;
  virtual void visitEcomma(Ecomma *p) = 0;
  virtual void visitEassign(Eassign *p) = 0;
  virtual void visitEcondition(Econdition *p) = 0;
  virtual void visitElor(Elor *p) = 0;
  virtual void visitEland(Eland *p) = 0;
  virtual void visitEbitor(Ebitor *p) = 0;
  virtual void visitEbitexor(Ebitexor *p) = 0;
  virtual void visitEbitand(Ebitand *p) = 0;
  virtual void visitEeq(Eeq *p) = 0;
  virtual void visitEneq(Eneq *p) = 0;
  virtual void visitElthen(Elthen *p) = 0;
  virtual void visitEgrthen(Egrthen *p) = 0;
  virtual void visitEle(Ele *p) = 0;
  virtual void visitEge(Ege *p) = 0;
  virtual void visitEleft(Eleft *p) = 0;
  virtual void visitEright(Eright *p) = 0;
  virtual void visitEplus(Eplus *p) = 0;
  virtual void visitEminus(Eminus *p) = 0;
  virtual void visitEtimes(Etimes *p) = 0;
  virtual void visitEdiv(Ediv *p) = 0;
  virtual void visitEmod(Emod *p) = 0;
  virtual void visitEtypeconv(Etypeconv *p) = 0;
  virtual void visitEpreinc(Epreinc *p) = 0;
  virtual void visitEpredec(Epredec *p) = 0;
  virtual void visitEpreop(Epreop *p) = 0;
  virtual void visitEbytesexpr(Ebytesexpr *p) = 0;
  virtual void visitEbytestype(Ebytestype *p) = 0;
  virtual void visitEarray(Earray *p) = 0;
  virtual void visitEfunk(Efunk *p) = 0;
  virtual void visitEfunkpar(Efunkpar *p) = 0;
  virtual void visitEselect(Eselect *p) = 0;
  virtual void visitEpoint(Epoint *p) = 0;
  virtual void visitEpostinc(Epostinc *p) = 0;
  virtual void visitEpostdec(Epostdec *p) = 0;
  virtual void visitEvar(Evar *p) = 0;
  virtual void visitEconst(Econst *p) = 0;
  virtual void visitEstring(Estring *p) = 0;
  virtual void visitEfloat(Efloat *p) = 0;
  virtual void visitEchar(Echar *p) = 0;
  virtual void visitEunsigned(Eunsigned *p) = 0;
  virtual void visitElong(Elong *p) = 0;
  virtual void visitEunsignlong(Eunsignlong *p) = 0;
  virtual void visitEhexadec(Ehexadec *p) = 0;
  virtual void visitEhexaunsign(Ehexaunsign *p) = 0;
  virtual void visitEhexalong(Ehexalong *p) = 0;
  virtual void visitEhexaunslong(Ehexaunslong *p) = 0;
  virtual void visitEoctal(Eoctal *p) = 0;
  virtual void visitEoctalunsign(Eoctalunsign *p) = 0;
  virtual void visitEoctallong(Eoctallong *p) = 0;
  virtual void visitEoctalunslong(Eoctalunslong *p) = 0;
  virtual void visitEcdouble(Ecdouble *p) = 0;
  virtual void visitEcfloat(Ecfloat *p) = 0;
  virtual void visitEclongdouble(Eclongdouble *p) = 0;
  virtual void visitEint(Eint *p) = 0;
  virtual void visitElonger(Elonger *p) = 0;
  virtual void visitEdouble(Edouble *p) = 0;
  virtual void visitEspecial(Especial *p) = 0;
  virtual void visitAddress(Address *p) = 0;
  virtual void visitIndirection(Indirection *p) = 0;
  virtual void visitPlus(Plus *p) = 0;
  virtual void visitNegative(Negative *p) = 0;
  virtual void visitComplement(Complement *p) = 0;
  virtual void visitLogicalneg(Logicalneg *p) = 0;
  virtual void visitAssign(Assign *p) = 0;
  virtual void visitAssignMul(AssignMul *p) = 0;
  virtual void visitAssignDiv(AssignDiv *p) = 0;
  virtual void visitAssignMod(AssignMod *p) = 0;
  virtual void visitAssignAdd(AssignAdd *p) = 0;
  virtual void visitAssignSub(AssignSub *p) = 0;
  virtual void visitAssignLeft(AssignLeft *p) = 0;
  virtual void visitAssignRight(AssignRight *p) = 0;
  virtual void visitAssignAnd(AssignAnd *p) = 0;
  virtual void visitAssignXor(AssignXor *p) = 0;
  virtual void visitAssignOr(AssignOr *p) = 0;
  virtual void visitListExternal_declaration(ListExternal_declaration *p) = 0;
  virtual void visitListDec(ListDec *p) = 0;
  virtual void visitListDeclaration_specifier(ListDeclaration_specifier *p) = 0;
  virtual void visitListInit_declarator(ListInit_declarator *p) = 0;
  virtual void visitListStruct_dec(ListStruct_dec *p) = 0;
  virtual void visitListSpec_qual(ListSpec_qual *p) = 0;
  virtual void visitListStruct_declarator(ListStruct_declarator *p) = 0;
  virtual void visitListEnumerator(ListEnumerator *p) = 0;
  virtual void visitListType_qualifier(ListType_qualifier *p) = 0;
  virtual void visitListIdent(ListIdent *p) = 0;
  virtual void visitListStm(ListStm *p) = 0;
  virtual void visitListExp(ListExp *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitUnsigned(Unsigned x) = 0;
  virtual void visitLong(Long x) = 0;
  virtual void visitUnsignedLong(UnsignedLong x) = 0;
  virtual void visitHexadecimal(Hexadecimal x) = 0;
  virtual void visitHexUnsigned(HexUnsigned x) = 0;
  virtual void visitHexLong(HexLong x) = 0;
  virtual void visitHexUnsLong(HexUnsLong x) = 0;
  virtual void visitOctal(Octal x) = 0;
  virtual void visitOctalUnsigned(OctalUnsigned x) = 0;
  virtual void visitOctalLong(OctalLong x) = 0;
  virtual void visitOctalUnsLong(OctalUnsLong x) = 0;
  virtual void visitCDouble(CDouble x) = 0;
  virtual void visitCFloat(CFloat x) = 0;
  virtual void visitCLongDouble(CLongDouble x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class External_declaration : public Visitable
{
public:
  virtual External_declaration *clone() const = 0;

};

class Function_def : public Visitable
{
public:
  virtual Function_def *clone() const = 0;

};

class Dec : public Visitable
{
public:
  virtual Dec *clone() const = 0;

};

class Declaration_specifier : public Visitable
{
public:
  virtual Declaration_specifier *clone() const = 0;

};

class Init_declarator : public Visitable
{
public:
  virtual Init_declarator *clone() const = 0;

};

class Type_specifier : public Visitable
{
public:
  virtual Type_specifier *clone() const = 0;

};

class Storage_class_specifier : public Visitable
{
public:
  virtual Storage_class_specifier *clone() const = 0;

};

class Type_qualifier : public Visitable
{
public:
  virtual Type_qualifier *clone() const = 0;

};

class Struct_or_union_spec : public Visitable
{
public:
  virtual Struct_or_union_spec *clone() const = 0;

};

class Struct_or_union : public Visitable
{
public:
  virtual Struct_or_union *clone() const = 0;

};

class Struct_dec : public Visitable
{
public:
  virtual Struct_dec *clone() const = 0;

};

class Spec_qual : public Visitable
{
public:
  virtual Spec_qual *clone() const = 0;

};

class Struct_declarator : public Visitable
{
public:
  virtual Struct_declarator *clone() const = 0;

};

class Enum_specifier : public Visitable
{
public:
  virtual Enum_specifier *clone() const = 0;

};

class Enumerator : public Visitable
{
public:
  virtual Enumerator *clone() const = 0;

};

class Declarator : public Visitable
{
public:
  virtual Declarator *clone() const = 0;

};

class Direct_declarator : public Visitable
{
public:
  virtual Direct_declarator *clone() const = 0;

};

class Pointer : public Visitable
{
public:
  virtual Pointer *clone() const = 0;

};

class Parameter_type : public Visitable
{
public:
  virtual Parameter_type *clone() const = 0;

};

class Parameter_declarations : public Visitable
{
public:
  virtual Parameter_declarations *clone() const = 0;

};

class Parameter_declaration : public Visitable
{
public:
  virtual Parameter_declaration *clone() const = 0;

};

class Initializer : public Visitable
{
public:
  virtual Initializer *clone() const = 0;

};

class Initializers : public Visitable
{
public:
  virtual Initializers *clone() const = 0;

};

class Type_name : public Visitable
{
public:
  virtual Type_name *clone() const = 0;

};

class Abstract_declarator : public Visitable
{
public:
  virtual Abstract_declarator *clone() const = 0;

};

class Dir_abs_dec : public Visitable
{
public:
  virtual Dir_abs_dec *clone() const = 0;

};

class Stm : public Visitable
{
public:
  virtual Stm *clone() const = 0;

};

class Labeled_stm : public Visitable
{
public:
  virtual Labeled_stm *clone() const = 0;

};

class Compound_stm : public Visitable
{
public:
  virtual Compound_stm *clone() const = 0;

};

class Expression_stm : public Visitable
{
public:
  virtual Expression_stm *clone() const = 0;

};

class Selection_stm : public Visitable
{
public:
  virtual Selection_stm *clone() const = 0;

};

class Iter_stm : public Visitable
{
public:
  virtual Iter_stm *clone() const = 0;

};

class Jump_stm : public Visitable
{
public:
  virtual Jump_stm *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class Constant : public Visitable
{
public:
  virtual Constant *clone() const = 0;

};

class Constant_expression : public Visitable
{
public:
  virtual Constant_expression *clone() const = 0;

};

class Unary_operator : public Visitable
{
public:
  virtual Unary_operator *clone() const = 0;

};

class Assignment_op : public Visitable
{
public:
  virtual Assignment_op *clone() const = 0;

};



class Progr : public Program
{
public:
  ListExternal_declaration *listexternal_declaration_;

  Progr(const Progr &);
  Progr &operator=(const Progr &);
  Progr(ListExternal_declaration *p1);
  ~Progr();
  virtual void accept(Visitor *v);
  virtual Progr *clone() const;
  void swap(Progr &);
};

class Afunc : public External_declaration
{
public:
  Function_def *function_def_;

  Afunc(const Afunc &);
  Afunc &operator=(const Afunc &);
  Afunc(Function_def *p1);
  ~Afunc();
  virtual void accept(Visitor *v);
  virtual Afunc *clone() const;
  void swap(Afunc &);
};

class Global : public External_declaration
{
public:
  Dec *dec_;

  Global(const Global &);
  Global &operator=(const Global &);
  Global(Dec *p1);
  ~Global();
  virtual void accept(Visitor *v);
  virtual Global *clone() const;
  void swap(Global &);
};

class OldFunc : public Function_def
{
public:
  ListDeclaration_specifier *listdeclaration_specifier_;
  Declarator *declarator_;
  ListDec *listdec_;
  Compound_stm *compound_stm_;

  OldFunc(const OldFunc &);
  OldFunc &operator=(const OldFunc &);
  OldFunc(ListDeclaration_specifier *p1, Declarator *p2, ListDec *p3, Compound_stm *p4);
  ~OldFunc();
  virtual void accept(Visitor *v);
  virtual OldFunc *clone() const;
  void swap(OldFunc &);
};

class NewFunc : public Function_def
{
public:
  ListDeclaration_specifier *listdeclaration_specifier_;
  Declarator *declarator_;
  Compound_stm *compound_stm_;

  NewFunc(const NewFunc &);
  NewFunc &operator=(const NewFunc &);
  NewFunc(ListDeclaration_specifier *p1, Declarator *p2, Compound_stm *p3);
  ~NewFunc();
  virtual void accept(Visitor *v);
  virtual NewFunc *clone() const;
  void swap(NewFunc &);
};

class OldFuncInt : public Function_def
{
public:
  Declarator *declarator_;
  ListDec *listdec_;
  Compound_stm *compound_stm_;

  OldFuncInt(const OldFuncInt &);
  OldFuncInt &operator=(const OldFuncInt &);
  OldFuncInt(Declarator *p1, ListDec *p2, Compound_stm *p3);
  ~OldFuncInt();
  virtual void accept(Visitor *v);
  virtual OldFuncInt *clone() const;
  void swap(OldFuncInt &);
};

class NewFuncInt : public Function_def
{
public:
  Declarator *declarator_;
  Compound_stm *compound_stm_;

  NewFuncInt(const NewFuncInt &);
  NewFuncInt &operator=(const NewFuncInt &);
  NewFuncInt(Declarator *p1, Compound_stm *p2);
  ~NewFuncInt();
  virtual void accept(Visitor *v);
  virtual NewFuncInt *clone() const;
  void swap(NewFuncInt &);
};

class NoDeclarator : public Dec
{
public:
  ListDeclaration_specifier *listdeclaration_specifier_;

  NoDeclarator(const NoDeclarator &);
  NoDeclarator &operator=(const NoDeclarator &);
  NoDeclarator(ListDeclaration_specifier *p1);
  ~NoDeclarator();
  virtual void accept(Visitor *v);
  virtual NoDeclarator *clone() const;
  void swap(NoDeclarator &);
};

class Declarators : public Dec
{
public:
  ListDeclaration_specifier *listdeclaration_specifier_;
  ListInit_declarator *listinit_declarator_;

  Declarators(const Declarators &);
  Declarators &operator=(const Declarators &);
  Declarators(ListDeclaration_specifier *p1, ListInit_declarator *p2);
  ~Declarators();
  virtual void accept(Visitor *v);
  virtual Declarators *clone() const;
  void swap(Declarators &);
};

class Type : public Declaration_specifier
{
public:
  Type_specifier *type_specifier_;

  Type(const Type &);
  Type &operator=(const Type &);
  Type(Type_specifier *p1);
  ~Type();
  virtual void accept(Visitor *v);
  virtual Type *clone() const;
  void swap(Type &);
};

class Storage : public Declaration_specifier
{
public:
  Storage_class_specifier *storage_class_specifier_;

  Storage(const Storage &);
  Storage &operator=(const Storage &);
  Storage(Storage_class_specifier *p1);
  ~Storage();
  virtual void accept(Visitor *v);
  virtual Storage *clone() const;
  void swap(Storage &);
};

class SpecProp : public Declaration_specifier
{
public:
  Type_qualifier *type_qualifier_;

  SpecProp(const SpecProp &);
  SpecProp &operator=(const SpecProp &);
  SpecProp(Type_qualifier *p1);
  ~SpecProp();
  virtual void accept(Visitor *v);
  virtual SpecProp *clone() const;
  void swap(SpecProp &);
};

class OnlyDecl : public Init_declarator
{
public:
  Declarator *declarator_;

  OnlyDecl(const OnlyDecl &);
  OnlyDecl &operator=(const OnlyDecl &);
  OnlyDecl(Declarator *p1);
  ~OnlyDecl();
  virtual void accept(Visitor *v);
  virtual OnlyDecl *clone() const;
  void swap(OnlyDecl &);
};

class InitDecl : public Init_declarator
{
public:
  Declarator *declarator_;
  Initializer *initializer_;

  InitDecl(const InitDecl &);
  InitDecl &operator=(const InitDecl &);
  InitDecl(Declarator *p1, Initializer *p2);
  ~InitDecl();
  virtual void accept(Visitor *v);
  virtual InitDecl *clone() const;
  void swap(InitDecl &);
};

class Tvoid : public Type_specifier
{
public:

  Tvoid(const Tvoid &);
  Tvoid &operator=(const Tvoid &);
  Tvoid();
  ~Tvoid();
  virtual void accept(Visitor *v);
  virtual Tvoid *clone() const;
  void swap(Tvoid &);
};

class Tchar : public Type_specifier
{
public:

  Tchar(const Tchar &);
  Tchar &operator=(const Tchar &);
  Tchar();
  ~Tchar();
  virtual void accept(Visitor *v);
  virtual Tchar *clone() const;
  void swap(Tchar &);
};

class Tshort : public Type_specifier
{
public:

  Tshort(const Tshort &);
  Tshort &operator=(const Tshort &);
  Tshort();
  ~Tshort();
  virtual void accept(Visitor *v);
  virtual Tshort *clone() const;
  void swap(Tshort &);
};

class Tint : public Type_specifier
{
public:

  Tint(const Tint &);
  Tint &operator=(const Tint &);
  Tint();
  ~Tint();
  virtual void accept(Visitor *v);
  virtual Tint *clone() const;
  void swap(Tint &);
};

class Tlong : public Type_specifier
{
public:

  Tlong(const Tlong &);
  Tlong &operator=(const Tlong &);
  Tlong();
  ~Tlong();
  virtual void accept(Visitor *v);
  virtual Tlong *clone() const;
  void swap(Tlong &);
};

class Tfloat : public Type_specifier
{
public:

  Tfloat(const Tfloat &);
  Tfloat &operator=(const Tfloat &);
  Tfloat();
  ~Tfloat();
  virtual void accept(Visitor *v);
  virtual Tfloat *clone() const;
  void swap(Tfloat &);
};

class Tdouble : public Type_specifier
{
public:

  Tdouble(const Tdouble &);
  Tdouble &operator=(const Tdouble &);
  Tdouble();
  ~Tdouble();
  virtual void accept(Visitor *v);
  virtual Tdouble *clone() const;
  void swap(Tdouble &);
};

class Tsigned : public Type_specifier
{
public:

  Tsigned(const Tsigned &);
  Tsigned &operator=(const Tsigned &);
  Tsigned();
  ~Tsigned();
  virtual void accept(Visitor *v);
  virtual Tsigned *clone() const;
  void swap(Tsigned &);
};

class Tunsigned : public Type_specifier
{
public:

  Tunsigned(const Tunsigned &);
  Tunsigned &operator=(const Tunsigned &);
  Tunsigned();
  ~Tunsigned();
  virtual void accept(Visitor *v);
  virtual Tunsigned *clone() const;
  void swap(Tunsigned &);
};

class Tstruct : public Type_specifier
{
public:
  Struct_or_union_spec *struct_or_union_spec_;

  Tstruct(const Tstruct &);
  Tstruct &operator=(const Tstruct &);
  Tstruct(Struct_or_union_spec *p1);
  ~Tstruct();
  virtual void accept(Visitor *v);
  virtual Tstruct *clone() const;
  void swap(Tstruct &);
};

class Tenum : public Type_specifier
{
public:
  Enum_specifier *enum_specifier_;

  Tenum(const Tenum &);
  Tenum &operator=(const Tenum &);
  Tenum(Enum_specifier *p1);
  ~Tenum();
  virtual void accept(Visitor *v);
  virtual Tenum *clone() const;
  void swap(Tenum &);
};

class Tname : public Type_specifier
{
public:

  Tname(const Tname &);
  Tname &operator=(const Tname &);
  Tname();
  ~Tname();
  virtual void accept(Visitor *v);
  virtual Tname *clone() const;
  void swap(Tname &);
};

class MyType : public Storage_class_specifier
{
public:

  MyType(const MyType &);
  MyType &operator=(const MyType &);
  MyType();
  ~MyType();
  virtual void accept(Visitor *v);
  virtual MyType *clone() const;
  void swap(MyType &);
};

class GlobalPrograms : public Storage_class_specifier
{
public:

  GlobalPrograms(const GlobalPrograms &);
  GlobalPrograms &operator=(const GlobalPrograms &);
  GlobalPrograms();
  ~GlobalPrograms();
  virtual void accept(Visitor *v);
  virtual GlobalPrograms *clone() const;
  void swap(GlobalPrograms &);
};

class LocalProgram : public Storage_class_specifier
{
public:

  LocalProgram(const LocalProgram &);
  LocalProgram &operator=(const LocalProgram &);
  LocalProgram();
  ~LocalProgram();
  virtual void accept(Visitor *v);
  virtual LocalProgram *clone() const;
  void swap(LocalProgram &);
};

class LocalBlock : public Storage_class_specifier
{
public:

  LocalBlock(const LocalBlock &);
  LocalBlock &operator=(const LocalBlock &);
  LocalBlock();
  ~LocalBlock();
  virtual void accept(Visitor *v);
  virtual LocalBlock *clone() const;
  void swap(LocalBlock &);
};

class LocalReg : public Storage_class_specifier
{
public:

  LocalReg(const LocalReg &);
  LocalReg &operator=(const LocalReg &);
  LocalReg();
  ~LocalReg();
  virtual void accept(Visitor *v);
  virtual LocalReg *clone() const;
  void swap(LocalReg &);
};

class Const : public Type_qualifier
{
public:

  Const(const Const &);
  Const &operator=(const Const &);
  Const();
  ~Const();
  virtual void accept(Visitor *v);
  virtual Const *clone() const;
  void swap(Const &);
};

class NoOptim : public Type_qualifier
{
public:

  NoOptim(const NoOptim &);
  NoOptim &operator=(const NoOptim &);
  NoOptim();
  ~NoOptim();
  virtual void accept(Visitor *v);
  virtual NoOptim *clone() const;
  void swap(NoOptim &);
};

class Tag : public Struct_or_union_spec
{
public:
  Struct_or_union *struct_or_union_;
  Ident ident_;
  ListStruct_dec *liststruct_dec_;

  Tag(const Tag &);
  Tag &operator=(const Tag &);
  Tag(Struct_or_union *p1, Ident p2, ListStruct_dec *p3);
  ~Tag();
  virtual void accept(Visitor *v);
  virtual Tag *clone() const;
  void swap(Tag &);
};

class Unique : public Struct_or_union_spec
{
public:
  Struct_or_union *struct_or_union_;
  ListStruct_dec *liststruct_dec_;

  Unique(const Unique &);
  Unique &operator=(const Unique &);
  Unique(Struct_or_union *p1, ListStruct_dec *p2);
  ~Unique();
  virtual void accept(Visitor *v);
  virtual Unique *clone() const;
  void swap(Unique &);
};

class TagType : public Struct_or_union_spec
{
public:
  Struct_or_union *struct_or_union_;
  Ident ident_;

  TagType(const TagType &);
  TagType &operator=(const TagType &);
  TagType(Struct_or_union *p1, Ident p2);
  ~TagType();
  virtual void accept(Visitor *v);
  virtual TagType *clone() const;
  void swap(TagType &);
};

class Struct : public Struct_or_union
{
public:

  Struct(const Struct &);
  Struct &operator=(const Struct &);
  Struct();
  ~Struct();
  virtual void accept(Visitor *v);
  virtual Struct *clone() const;
  void swap(Struct &);
};

class Union : public Struct_or_union
{
public:

  Union(const Union &);
  Union &operator=(const Union &);
  Union();
  ~Union();
  virtual void accept(Visitor *v);
  virtual Union *clone() const;
  void swap(Union &);
};

class Structen : public Struct_dec
{
public:
  ListSpec_qual *listspec_qual_;
  ListStruct_declarator *liststruct_declarator_;

  Structen(const Structen &);
  Structen &operator=(const Structen &);
  Structen(ListSpec_qual *p1, ListStruct_declarator *p2);
  ~Structen();
  virtual void accept(Visitor *v);
  virtual Structen *clone() const;
  void swap(Structen &);
};

class TypeSpec : public Spec_qual
{
public:
  Type_specifier *type_specifier_;

  TypeSpec(const TypeSpec &);
  TypeSpec &operator=(const TypeSpec &);
  TypeSpec(Type_specifier *p1);
  ~TypeSpec();
  virtual void accept(Visitor *v);
  virtual TypeSpec *clone() const;
  void swap(TypeSpec &);
};

class QualSpec : public Spec_qual
{
public:
  Type_qualifier *type_qualifier_;

  QualSpec(const QualSpec &);
  QualSpec &operator=(const QualSpec &);
  QualSpec(Type_qualifier *p1);
  ~QualSpec();
  virtual void accept(Visitor *v);
  virtual QualSpec *clone() const;
  void swap(QualSpec &);
};

class Decl : public Struct_declarator
{
public:
  Declarator *declarator_;

  Decl(const Decl &);
  Decl &operator=(const Decl &);
  Decl(Declarator *p1);
  ~Decl();
  virtual void accept(Visitor *v);
  virtual Decl *clone() const;
  void swap(Decl &);
};

class Field : public Struct_declarator
{
public:
  Constant_expression *constant_expression_;

  Field(const Field &);
  Field &operator=(const Field &);
  Field(Constant_expression *p1);
  ~Field();
  virtual void accept(Visitor *v);
  virtual Field *clone() const;
  void swap(Field &);
};

class DecField : public Struct_declarator
{
public:
  Declarator *declarator_;
  Constant_expression *constant_expression_;

  DecField(const DecField &);
  DecField &operator=(const DecField &);
  DecField(Declarator *p1, Constant_expression *p2);
  ~DecField();
  virtual void accept(Visitor *v);
  virtual DecField *clone() const;
  void swap(DecField &);
};

class EnumDec : public Enum_specifier
{
public:
  ListEnumerator *listenumerator_;

  EnumDec(const EnumDec &);
  EnumDec &operator=(const EnumDec &);
  EnumDec(ListEnumerator *p1);
  ~EnumDec();
  virtual void accept(Visitor *v);
  virtual EnumDec *clone() const;
  void swap(EnumDec &);
};

class EnumName : public Enum_specifier
{
public:
  Ident ident_;
  ListEnumerator *listenumerator_;

  EnumName(const EnumName &);
  EnumName &operator=(const EnumName &);
  EnumName(Ident p1, ListEnumerator *p2);
  ~EnumName();
  virtual void accept(Visitor *v);
  virtual EnumName *clone() const;
  void swap(EnumName &);
};

class EnumVar : public Enum_specifier
{
public:
  Ident ident_;

  EnumVar(const EnumVar &);
  EnumVar &operator=(const EnumVar &);
  EnumVar(Ident p1);
  ~EnumVar();
  virtual void accept(Visitor *v);
  virtual EnumVar *clone() const;
  void swap(EnumVar &);
};

class Plain : public Enumerator
{
public:
  Ident ident_;

  Plain(const Plain &);
  Plain &operator=(const Plain &);
  Plain(Ident p1);
  ~Plain();
  virtual void accept(Visitor *v);
  virtual Plain *clone() const;
  void swap(Plain &);
};

class EnumInit : public Enumerator
{
public:
  Ident ident_;
  Constant_expression *constant_expression_;

  EnumInit(const EnumInit &);
  EnumInit &operator=(const EnumInit &);
  EnumInit(Ident p1, Constant_expression *p2);
  ~EnumInit();
  virtual void accept(Visitor *v);
  virtual EnumInit *clone() const;
  void swap(EnumInit &);
};

class BeginPointer : public Declarator
{
public:
  Pointer *pointer_;
  Direct_declarator *direct_declarator_;

  BeginPointer(const BeginPointer &);
  BeginPointer &operator=(const BeginPointer &);
  BeginPointer(Pointer *p1, Direct_declarator *p2);
  ~BeginPointer();
  virtual void accept(Visitor *v);
  virtual BeginPointer *clone() const;
  void swap(BeginPointer &);
};

class NoPointer : public Declarator
{
public:
  Direct_declarator *direct_declarator_;

  NoPointer(const NoPointer &);
  NoPointer &operator=(const NoPointer &);
  NoPointer(Direct_declarator *p1);
  ~NoPointer();
  virtual void accept(Visitor *v);
  virtual NoPointer *clone() const;
  void swap(NoPointer &);
};

class Name : public Direct_declarator
{
public:
  Ident ident_;

  Name(const Name &);
  Name &operator=(const Name &);
  Name(Ident p1);
  ~Name();
  virtual void accept(Visitor *v);
  virtual Name *clone() const;
  void swap(Name &);
};

class ParenDecl : public Direct_declarator
{
public:
  Declarator *declarator_;

  ParenDecl(const ParenDecl &);
  ParenDecl &operator=(const ParenDecl &);
  ParenDecl(Declarator *p1);
  ~ParenDecl();
  virtual void accept(Visitor *v);
  virtual ParenDecl *clone() const;
  void swap(ParenDecl &);
};

class InnitArray : public Direct_declarator
{
public:
  Direct_declarator *direct_declarator_;
  Constant_expression *constant_expression_;

  InnitArray(const InnitArray &);
  InnitArray &operator=(const InnitArray &);
  InnitArray(Direct_declarator *p1, Constant_expression *p2);
  ~InnitArray();
  virtual void accept(Visitor *v);
  virtual InnitArray *clone() const;
  void swap(InnitArray &);
};

class Incomplete : public Direct_declarator
{
public:
  Direct_declarator *direct_declarator_;

  Incomplete(const Incomplete &);
  Incomplete &operator=(const Incomplete &);
  Incomplete(Direct_declarator *p1);
  ~Incomplete();
  virtual void accept(Visitor *v);
  virtual Incomplete *clone() const;
  void swap(Incomplete &);
};

class NewFuncDec : public Direct_declarator
{
public:
  Direct_declarator *direct_declarator_;
  Parameter_type *parameter_type_;

  NewFuncDec(const NewFuncDec &);
  NewFuncDec &operator=(const NewFuncDec &);
  NewFuncDec(Direct_declarator *p1, Parameter_type *p2);
  ~NewFuncDec();
  virtual void accept(Visitor *v);
  virtual NewFuncDec *clone() const;
  void swap(NewFuncDec &);
};

class OldFuncDef : public Direct_declarator
{
public:
  Direct_declarator *direct_declarator_;
  ListIdent *listident_;

  OldFuncDef(const OldFuncDef &);
  OldFuncDef &operator=(const OldFuncDef &);
  OldFuncDef(Direct_declarator *p1, ListIdent *p2);
  ~OldFuncDef();
  virtual void accept(Visitor *v);
  virtual OldFuncDef *clone() const;
  void swap(OldFuncDef &);
};

class OldFuncDec : public Direct_declarator
{
public:
  Direct_declarator *direct_declarator_;

  OldFuncDec(const OldFuncDec &);
  OldFuncDec &operator=(const OldFuncDec &);
  OldFuncDec(Direct_declarator *p1);
  ~OldFuncDec();
  virtual void accept(Visitor *v);
  virtual OldFuncDec *clone() const;
  void swap(OldFuncDec &);
};

class Point : public Pointer
{
public:

  Point(const Point &);
  Point &operator=(const Point &);
  Point();
  ~Point();
  virtual void accept(Visitor *v);
  virtual Point *clone() const;
  void swap(Point &);
};

class PointQual : public Pointer
{
public:
  ListType_qualifier *listtype_qualifier_;

  PointQual(const PointQual &);
  PointQual &operator=(const PointQual &);
  PointQual(ListType_qualifier *p1);
  ~PointQual();
  virtual void accept(Visitor *v);
  virtual PointQual *clone() const;
  void swap(PointQual &);
};

class PointPoint : public Pointer
{
public:
  Pointer *pointer_;

  PointPoint(const PointPoint &);
  PointPoint &operator=(const PointPoint &);
  PointPoint(Pointer *p1);
  ~PointPoint();
  virtual void accept(Visitor *v);
  virtual PointPoint *clone() const;
  void swap(PointPoint &);
};

class PointQualPoint : public Pointer
{
public:
  ListType_qualifier *listtype_qualifier_;
  Pointer *pointer_;

  PointQualPoint(const PointQualPoint &);
  PointQualPoint &operator=(const PointQualPoint &);
  PointQualPoint(ListType_qualifier *p1, Pointer *p2);
  ~PointQualPoint();
  virtual void accept(Visitor *v);
  virtual PointQualPoint *clone() const;
  void swap(PointQualPoint &);
};

class AllSpec : public Parameter_type
{
public:
  Parameter_declarations *parameter_declarations_;

  AllSpec(const AllSpec &);
  AllSpec &operator=(const AllSpec &);
  AllSpec(Parameter_declarations *p1);
  ~AllSpec();
  virtual void accept(Visitor *v);
  virtual AllSpec *clone() const;
  void swap(AllSpec &);
};

class More : public Parameter_type
{
public:
  Parameter_declarations *parameter_declarations_;

  More(const More &);
  More &operator=(const More &);
  More(Parameter_declarations *p1);
  ~More();
  virtual void accept(Visitor *v);
  virtual More *clone() const;
  void swap(More &);
};

class ParamDec : public Parameter_declarations
{
public:
  Parameter_declaration *parameter_declaration_;

  ParamDec(const ParamDec &);
  ParamDec &operator=(const ParamDec &);
  ParamDec(Parameter_declaration *p1);
  ~ParamDec();
  virtual void accept(Visitor *v);
  virtual ParamDec *clone() const;
  void swap(ParamDec &);
};

class MoreParamDec : public Parameter_declarations
{
public:
  Parameter_declarations *parameter_declarations_;
  Parameter_declaration *parameter_declaration_;

  MoreParamDec(const MoreParamDec &);
  MoreParamDec &operator=(const MoreParamDec &);
  MoreParamDec(Parameter_declarations *p1, Parameter_declaration *p2);
  ~MoreParamDec();
  virtual void accept(Visitor *v);
  virtual MoreParamDec *clone() const;
  void swap(MoreParamDec &);
};

class OnlyType : public Parameter_declaration
{
public:
  ListDeclaration_specifier *listdeclaration_specifier_;

  OnlyType(const OnlyType &);
  OnlyType &operator=(const OnlyType &);
  OnlyType(ListDeclaration_specifier *p1);
  ~OnlyType();
  virtual void accept(Visitor *v);
  virtual OnlyType *clone() const;
  void swap(OnlyType &);
};

class TypeAndParam : public Parameter_declaration
{
public:
  ListDeclaration_specifier *listdeclaration_specifier_;
  Declarator *declarator_;

  TypeAndParam(const TypeAndParam &);
  TypeAndParam &operator=(const TypeAndParam &);
  TypeAndParam(ListDeclaration_specifier *p1, Declarator *p2);
  ~TypeAndParam();
  virtual void accept(Visitor *v);
  virtual TypeAndParam *clone() const;
  void swap(TypeAndParam &);
};

class Abstract : public Parameter_declaration
{
public:
  ListDeclaration_specifier *listdeclaration_specifier_;
  Abstract_declarator *abstract_declarator_;

  Abstract(const Abstract &);
  Abstract &operator=(const Abstract &);
  Abstract(ListDeclaration_specifier *p1, Abstract_declarator *p2);
  ~Abstract();
  virtual void accept(Visitor *v);
  virtual Abstract *clone() const;
  void swap(Abstract &);
};

class InitExpr : public Initializer
{
public:
  Exp *exp_;

  InitExpr(const InitExpr &);
  InitExpr &operator=(const InitExpr &);
  InitExpr(Exp *p1);
  ~InitExpr();
  virtual void accept(Visitor *v);
  virtual InitExpr *clone() const;
  void swap(InitExpr &);
};

class InitListOne : public Initializer
{
public:
  Initializers *initializers_;

  InitListOne(const InitListOne &);
  InitListOne &operator=(const InitListOne &);
  InitListOne(Initializers *p1);
  ~InitListOne();
  virtual void accept(Visitor *v);
  virtual InitListOne *clone() const;
  void swap(InitListOne &);
};

class InitListTwo : public Initializer
{
public:
  Initializers *initializers_;

  InitListTwo(const InitListTwo &);
  InitListTwo &operator=(const InitListTwo &);
  InitListTwo(Initializers *p1);
  ~InitListTwo();
  virtual void accept(Visitor *v);
  virtual InitListTwo *clone() const;
  void swap(InitListTwo &);
};

class AnInit : public Initializers
{
public:
  Initializer *initializer_;

  AnInit(const AnInit &);
  AnInit &operator=(const AnInit &);
  AnInit(Initializer *p1);
  ~AnInit();
  virtual void accept(Visitor *v);
  virtual AnInit *clone() const;
  void swap(AnInit &);
};

class MoreInit : public Initializers
{
public:
  Initializers *initializers_;
  Initializer *initializer_;

  MoreInit(const MoreInit &);
  MoreInit &operator=(const MoreInit &);
  MoreInit(Initializers *p1, Initializer *p2);
  ~MoreInit();
  virtual void accept(Visitor *v);
  virtual MoreInit *clone() const;
  void swap(MoreInit &);
};

class PlainType : public Type_name
{
public:
  ListSpec_qual *listspec_qual_;

  PlainType(const PlainType &);
  PlainType &operator=(const PlainType &);
  PlainType(ListSpec_qual *p1);
  ~PlainType();
  virtual void accept(Visitor *v);
  virtual PlainType *clone() const;
  void swap(PlainType &);
};

class ExtendedType : public Type_name
{
public:
  ListSpec_qual *listspec_qual_;
  Abstract_declarator *abstract_declarator_;

  ExtendedType(const ExtendedType &);
  ExtendedType &operator=(const ExtendedType &);
  ExtendedType(ListSpec_qual *p1, Abstract_declarator *p2);
  ~ExtendedType();
  virtual void accept(Visitor *v);
  virtual ExtendedType *clone() const;
  void swap(ExtendedType &);
};

class PointerStart : public Abstract_declarator
{
public:
  Pointer *pointer_;

  PointerStart(const PointerStart &);
  PointerStart &operator=(const PointerStart &);
  PointerStart(Pointer *p1);
  ~PointerStart();
  virtual void accept(Visitor *v);
  virtual PointerStart *clone() const;
  void swap(PointerStart &);
};

class Advanced : public Abstract_declarator
{
public:
  Dir_abs_dec *dir_abs_dec_;

  Advanced(const Advanced &);
  Advanced &operator=(const Advanced &);
  Advanced(Dir_abs_dec *p1);
  ~Advanced();
  virtual void accept(Visitor *v);
  virtual Advanced *clone() const;
  void swap(Advanced &);
};

class PointAdvanced : public Abstract_declarator
{
public:
  Pointer *pointer_;
  Dir_abs_dec *dir_abs_dec_;

  PointAdvanced(const PointAdvanced &);
  PointAdvanced &operator=(const PointAdvanced &);
  PointAdvanced(Pointer *p1, Dir_abs_dec *p2);
  ~PointAdvanced();
  virtual void accept(Visitor *v);
  virtual PointAdvanced *clone() const;
  void swap(PointAdvanced &);
};

class WithinParentes : public Dir_abs_dec
{
public:
  Abstract_declarator *abstract_declarator_;

  WithinParentes(const WithinParentes &);
  WithinParentes &operator=(const WithinParentes &);
  WithinParentes(Abstract_declarator *p1);
  ~WithinParentes();
  virtual void accept(Visitor *v);
  virtual WithinParentes *clone() const;
  void swap(WithinParentes &);
};

class Array : public Dir_abs_dec
{
public:

  Array(const Array &);
  Array &operator=(const Array &);
  Array();
  ~Array();
  virtual void accept(Visitor *v);
  virtual Array *clone() const;
  void swap(Array &);
};

class InitiatedArray : public Dir_abs_dec
{
public:
  Constant_expression *constant_expression_;

  InitiatedArray(const InitiatedArray &);
  InitiatedArray &operator=(const InitiatedArray &);
  InitiatedArray(Constant_expression *p1);
  ~InitiatedArray();
  virtual void accept(Visitor *v);
  virtual InitiatedArray *clone() const;
  void swap(InitiatedArray &);
};

class UnInitiated : public Dir_abs_dec
{
public:
  Dir_abs_dec *dir_abs_dec_;

  UnInitiated(const UnInitiated &);
  UnInitiated &operator=(const UnInitiated &);
  UnInitiated(Dir_abs_dec *p1);
  ~UnInitiated();
  virtual void accept(Visitor *v);
  virtual UnInitiated *clone() const;
  void swap(UnInitiated &);
};

class Initiated : public Dir_abs_dec
{
public:
  Dir_abs_dec *dir_abs_dec_;
  Constant_expression *constant_expression_;

  Initiated(const Initiated &);
  Initiated &operator=(const Initiated &);
  Initiated(Dir_abs_dec *p1, Constant_expression *p2);
  ~Initiated();
  virtual void accept(Visitor *v);
  virtual Initiated *clone() const;
  void swap(Initiated &);
};

class OldFunction : public Dir_abs_dec
{
public:

  OldFunction(const OldFunction &);
  OldFunction &operator=(const OldFunction &);
  OldFunction();
  ~OldFunction();
  virtual void accept(Visitor *v);
  virtual OldFunction *clone() const;
  void swap(OldFunction &);
};

class NewFunction : public Dir_abs_dec
{
public:
  Parameter_type *parameter_type_;

  NewFunction(const NewFunction &);
  NewFunction &operator=(const NewFunction &);
  NewFunction(Parameter_type *p1);
  ~NewFunction();
  virtual void accept(Visitor *v);
  virtual NewFunction *clone() const;
  void swap(NewFunction &);
};

class OldFuncExpr : public Dir_abs_dec
{
public:
  Dir_abs_dec *dir_abs_dec_;

  OldFuncExpr(const OldFuncExpr &);
  OldFuncExpr &operator=(const OldFuncExpr &);
  OldFuncExpr(Dir_abs_dec *p1);
  ~OldFuncExpr();
  virtual void accept(Visitor *v);
  virtual OldFuncExpr *clone() const;
  void swap(OldFuncExpr &);
};

class NewFuncExpr : public Dir_abs_dec
{
public:
  Dir_abs_dec *dir_abs_dec_;
  Parameter_type *parameter_type_;

  NewFuncExpr(const NewFuncExpr &);
  NewFuncExpr &operator=(const NewFuncExpr &);
  NewFuncExpr(Dir_abs_dec *p1, Parameter_type *p2);
  ~NewFuncExpr();
  virtual void accept(Visitor *v);
  virtual NewFuncExpr *clone() const;
  void swap(NewFuncExpr &);
};

class LabelS : public Stm
{
public:
  Labeled_stm *labeled_stm_;

  LabelS(const LabelS &);
  LabelS &operator=(const LabelS &);
  LabelS(Labeled_stm *p1);
  ~LabelS();
  virtual void accept(Visitor *v);
  virtual LabelS *clone() const;
  void swap(LabelS &);
};

class CompS : public Stm
{
public:
  Compound_stm *compound_stm_;

  CompS(const CompS &);
  CompS &operator=(const CompS &);
  CompS(Compound_stm *p1);
  ~CompS();
  virtual void accept(Visitor *v);
  virtual CompS *clone() const;
  void swap(CompS &);
};

class ExprS : public Stm
{
public:
  Expression_stm *expression_stm_;

  ExprS(const ExprS &);
  ExprS &operator=(const ExprS &);
  ExprS(Expression_stm *p1);
  ~ExprS();
  virtual void accept(Visitor *v);
  virtual ExprS *clone() const;
  void swap(ExprS &);
};

class SelS : public Stm
{
public:
  Selection_stm *selection_stm_;

  SelS(const SelS &);
  SelS &operator=(const SelS &);
  SelS(Selection_stm *p1);
  ~SelS();
  virtual void accept(Visitor *v);
  virtual SelS *clone() const;
  void swap(SelS &);
};

class IterS : public Stm
{
public:
  Iter_stm *iter_stm_;

  IterS(const IterS &);
  IterS &operator=(const IterS &);
  IterS(Iter_stm *p1);
  ~IterS();
  virtual void accept(Visitor *v);
  virtual IterS *clone() const;
  void swap(IterS &);
};

class JumpS : public Stm
{
public:
  Jump_stm *jump_stm_;

  JumpS(const JumpS &);
  JumpS &operator=(const JumpS &);
  JumpS(Jump_stm *p1);
  ~JumpS();
  virtual void accept(Visitor *v);
  virtual JumpS *clone() const;
  void swap(JumpS &);
};

class SlabelOne : public Labeled_stm
{
public:
  Ident ident_;
  Stm *stm_;

  SlabelOne(const SlabelOne &);
  SlabelOne &operator=(const SlabelOne &);
  SlabelOne(Ident p1, Stm *p2);
  ~SlabelOne();
  virtual void accept(Visitor *v);
  virtual SlabelOne *clone() const;
  void swap(SlabelOne &);
};

class SlabelTwo : public Labeled_stm
{
public:
  Constant_expression *constant_expression_;
  Stm *stm_;

  SlabelTwo(const SlabelTwo &);
  SlabelTwo &operator=(const SlabelTwo &);
  SlabelTwo(Constant_expression *p1, Stm *p2);
  ~SlabelTwo();
  virtual void accept(Visitor *v);
  virtual SlabelTwo *clone() const;
  void swap(SlabelTwo &);
};

class SlabelThree : public Labeled_stm
{
public:
  Stm *stm_;

  SlabelThree(const SlabelThree &);
  SlabelThree &operator=(const SlabelThree &);
  SlabelThree(Stm *p1);
  ~SlabelThree();
  virtual void accept(Visitor *v);
  virtual SlabelThree *clone() const;
  void swap(SlabelThree &);
};

class ScompOne : public Compound_stm
{
public:

  ScompOne(const ScompOne &);
  ScompOne &operator=(const ScompOne &);
  ScompOne();
  ~ScompOne();
  virtual void accept(Visitor *v);
  virtual ScompOne *clone() const;
  void swap(ScompOne &);
};

class ScompTwo : public Compound_stm
{
public:
  ListStm *liststm_;

  ScompTwo(const ScompTwo &);
  ScompTwo &operator=(const ScompTwo &);
  ScompTwo(ListStm *p1);
  ~ScompTwo();
  virtual void accept(Visitor *v);
  virtual ScompTwo *clone() const;
  void swap(ScompTwo &);
};

class ScompThree : public Compound_stm
{
public:
  ListDec *listdec_;

  ScompThree(const ScompThree &);
  ScompThree &operator=(const ScompThree &);
  ScompThree(ListDec *p1);
  ~ScompThree();
  virtual void accept(Visitor *v);
  virtual ScompThree *clone() const;
  void swap(ScompThree &);
};

class ScompFour : public Compound_stm
{
public:
  ListDec *listdec_;
  ListStm *liststm_;

  ScompFour(const ScompFour &);
  ScompFour &operator=(const ScompFour &);
  ScompFour(ListDec *p1, ListStm *p2);
  ~ScompFour();
  virtual void accept(Visitor *v);
  virtual ScompFour *clone() const;
  void swap(ScompFour &);
};

class SexprOne : public Expression_stm
{
public:

  SexprOne(const SexprOne &);
  SexprOne &operator=(const SexprOne &);
  SexprOne();
  ~SexprOne();
  virtual void accept(Visitor *v);
  virtual SexprOne *clone() const;
  void swap(SexprOne &);
};

class SexprTwo : public Expression_stm
{
public:
  Exp *exp_;

  SexprTwo(const SexprTwo &);
  SexprTwo &operator=(const SexprTwo &);
  SexprTwo(Exp *p1);
  ~SexprTwo();
  virtual void accept(Visitor *v);
  virtual SexprTwo *clone() const;
  void swap(SexprTwo &);
};

class SselOne : public Selection_stm
{
public:
  Exp *exp_;
  Stm *stm_;

  SselOne(const SselOne &);
  SselOne &operator=(const SselOne &);
  SselOne(Exp *p1, Stm *p2);
  ~SselOne();
  virtual void accept(Visitor *v);
  virtual SselOne *clone() const;
  void swap(SselOne &);
};

class SselTwo : public Selection_stm
{
public:
  Exp *exp_;
  Stm *stm_1;
  Stm *stm_2;

  SselTwo(const SselTwo &);
  SselTwo &operator=(const SselTwo &);
  SselTwo(Exp *p1, Stm *p2, Stm *p3);
  ~SselTwo();
  virtual void accept(Visitor *v);
  virtual SselTwo *clone() const;
  void swap(SselTwo &);
};

class SselThree : public Selection_stm
{
public:
  Exp *exp_;
  Stm *stm_;

  SselThree(const SselThree &);
  SselThree &operator=(const SselThree &);
  SselThree(Exp *p1, Stm *p2);
  ~SselThree();
  virtual void accept(Visitor *v);
  virtual SselThree *clone() const;
  void swap(SselThree &);
};

class SiterOne : public Iter_stm
{
public:
  Exp *exp_;
  Stm *stm_;

  SiterOne(const SiterOne &);
  SiterOne &operator=(const SiterOne &);
  SiterOne(Exp *p1, Stm *p2);
  ~SiterOne();
  virtual void accept(Visitor *v);
  virtual SiterOne *clone() const;
  void swap(SiterOne &);
};

class SiterTwo : public Iter_stm
{
public:
  Stm *stm_;
  Exp *exp_;

  SiterTwo(const SiterTwo &);
  SiterTwo &operator=(const SiterTwo &);
  SiterTwo(Stm *p1, Exp *p2);
  ~SiterTwo();
  virtual void accept(Visitor *v);
  virtual SiterTwo *clone() const;
  void swap(SiterTwo &);
};

class SiterThree : public Iter_stm
{
public:
  Expression_stm *expression_stm_1;
  Expression_stm *expression_stm_2;
  Stm *stm_;

  SiterThree(const SiterThree &);
  SiterThree &operator=(const SiterThree &);
  SiterThree(Expression_stm *p1, Expression_stm *p2, Stm *p3);
  ~SiterThree();
  virtual void accept(Visitor *v);
  virtual SiterThree *clone() const;
  void swap(SiterThree &);
};

class SiterFour : public Iter_stm
{
public:
  Expression_stm *expression_stm_1;
  Expression_stm *expression_stm_2;
  Exp *exp_;
  Stm *stm_;

  SiterFour(const SiterFour &);
  SiterFour &operator=(const SiterFour &);
  SiterFour(Expression_stm *p1, Expression_stm *p2, Exp *p3, Stm *p4);
  ~SiterFour();
  virtual void accept(Visitor *v);
  virtual SiterFour *clone() const;
  void swap(SiterFour &);
};

class SjumpOne : public Jump_stm
{
public:
  Ident ident_;

  SjumpOne(const SjumpOne &);
  SjumpOne &operator=(const SjumpOne &);
  SjumpOne(Ident p1);
  ~SjumpOne();
  virtual void accept(Visitor *v);
  virtual SjumpOne *clone() const;
  void swap(SjumpOne &);
};

class SjumpTwo : public Jump_stm
{
public:

  SjumpTwo(const SjumpTwo &);
  SjumpTwo &operator=(const SjumpTwo &);
  SjumpTwo();
  ~SjumpTwo();
  virtual void accept(Visitor *v);
  virtual SjumpTwo *clone() const;
  void swap(SjumpTwo &);
};

class SjumpThree : public Jump_stm
{
public:

  SjumpThree(const SjumpThree &);
  SjumpThree &operator=(const SjumpThree &);
  SjumpThree();
  ~SjumpThree();
  virtual void accept(Visitor *v);
  virtual SjumpThree *clone() const;
  void swap(SjumpThree &);
};

class SjumpFour : public Jump_stm
{
public:

  SjumpFour(const SjumpFour &);
  SjumpFour &operator=(const SjumpFour &);
  SjumpFour();
  ~SjumpFour();
  virtual void accept(Visitor *v);
  virtual SjumpFour *clone() const;
  void swap(SjumpFour &);
};

class SjumpFive : public Jump_stm
{
public:
  Exp *exp_;

  SjumpFive(const SjumpFive &);
  SjumpFive &operator=(const SjumpFive &);
  SjumpFive(Exp *p1);
  ~SjumpFive();
  virtual void accept(Visitor *v);
  virtual SjumpFive *clone() const;
  void swap(SjumpFive &);
};

class Ecomma : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Ecomma(const Ecomma &);
  Ecomma &operator=(const Ecomma &);
  Ecomma(Exp *p1, Exp *p2);
  ~Ecomma();
  virtual void accept(Visitor *v);
  virtual Ecomma *clone() const;
  void swap(Ecomma &);
};

class Eassign : public Exp
{
public:
  Exp *exp_1;
  Assignment_op *assignment_op_;
  Exp *exp_2;

  Eassign(const Eassign &);
  Eassign &operator=(const Eassign &);
  Eassign(Exp *p1, Assignment_op *p2, Exp *p3);
  ~Eassign();
  virtual void accept(Visitor *v);
  virtual Eassign *clone() const;
  void swap(Eassign &);
};

class Econdition : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;
  Exp *exp_3;

  Econdition(const Econdition &);
  Econdition &operator=(const Econdition &);
  Econdition(Exp *p1, Exp *p2, Exp *p3);
  ~Econdition();
  virtual void accept(Visitor *v);
  virtual Econdition *clone() const;
  void swap(Econdition &);
};

class Elor : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Elor(const Elor &);
  Elor &operator=(const Elor &);
  Elor(Exp *p1, Exp *p2);
  ~Elor();
  virtual void accept(Visitor *v);
  virtual Elor *clone() const;
  void swap(Elor &);
};

class Eland : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Eland(const Eland &);
  Eland &operator=(const Eland &);
  Eland(Exp *p1, Exp *p2);
  ~Eland();
  virtual void accept(Visitor *v);
  virtual Eland *clone() const;
  void swap(Eland &);
};

class Ebitor : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Ebitor(const Ebitor &);
  Ebitor &operator=(const Ebitor &);
  Ebitor(Exp *p1, Exp *p2);
  ~Ebitor();
  virtual void accept(Visitor *v);
  virtual Ebitor *clone() const;
  void swap(Ebitor &);
};

class Ebitexor : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Ebitexor(const Ebitexor &);
  Ebitexor &operator=(const Ebitexor &);
  Ebitexor(Exp *p1, Exp *p2);
  ~Ebitexor();
  virtual void accept(Visitor *v);
  virtual Ebitexor *clone() const;
  void swap(Ebitexor &);
};

class Ebitand : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Ebitand(const Ebitand &);
  Ebitand &operator=(const Ebitand &);
  Ebitand(Exp *p1, Exp *p2);
  ~Ebitand();
  virtual void accept(Visitor *v);
  virtual Ebitand *clone() const;
  void swap(Ebitand &);
};

class Eeq : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Eeq(const Eeq &);
  Eeq &operator=(const Eeq &);
  Eeq(Exp *p1, Exp *p2);
  ~Eeq();
  virtual void accept(Visitor *v);
  virtual Eeq *clone() const;
  void swap(Eeq &);
};

class Eneq : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Eneq(const Eneq &);
  Eneq &operator=(const Eneq &);
  Eneq(Exp *p1, Exp *p2);
  ~Eneq();
  virtual void accept(Visitor *v);
  virtual Eneq *clone() const;
  void swap(Eneq &);
};

class Elthen : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Elthen(const Elthen &);
  Elthen &operator=(const Elthen &);
  Elthen(Exp *p1, Exp *p2);
  ~Elthen();
  virtual void accept(Visitor *v);
  virtual Elthen *clone() const;
  void swap(Elthen &);
};

class Egrthen : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Egrthen(const Egrthen &);
  Egrthen &operator=(const Egrthen &);
  Egrthen(Exp *p1, Exp *p2);
  ~Egrthen();
  virtual void accept(Visitor *v);
  virtual Egrthen *clone() const;
  void swap(Egrthen &);
};

class Ele : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Ele(const Ele &);
  Ele &operator=(const Ele &);
  Ele(Exp *p1, Exp *p2);
  ~Ele();
  virtual void accept(Visitor *v);
  virtual Ele *clone() const;
  void swap(Ele &);
};

class Ege : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Ege(const Ege &);
  Ege &operator=(const Ege &);
  Ege(Exp *p1, Exp *p2);
  ~Ege();
  virtual void accept(Visitor *v);
  virtual Ege *clone() const;
  void swap(Ege &);
};

class Eleft : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Eleft(const Eleft &);
  Eleft &operator=(const Eleft &);
  Eleft(Exp *p1, Exp *p2);
  ~Eleft();
  virtual void accept(Visitor *v);
  virtual Eleft *clone() const;
  void swap(Eleft &);
};

class Eright : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Eright(const Eright &);
  Eright &operator=(const Eright &);
  Eright(Exp *p1, Exp *p2);
  ~Eright();
  virtual void accept(Visitor *v);
  virtual Eright *clone() const;
  void swap(Eright &);
};

class Eplus : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Eplus(const Eplus &);
  Eplus &operator=(const Eplus &);
  Eplus(Exp *p1, Exp *p2);
  ~Eplus();
  virtual void accept(Visitor *v);
  virtual Eplus *clone() const;
  void swap(Eplus &);
};

class Eminus : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Eminus(const Eminus &);
  Eminus &operator=(const Eminus &);
  Eminus(Exp *p1, Exp *p2);
  ~Eminus();
  virtual void accept(Visitor *v);
  virtual Eminus *clone() const;
  void swap(Eminus &);
};

class Etimes : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Etimes(const Etimes &);
  Etimes &operator=(const Etimes &);
  Etimes(Exp *p1, Exp *p2);
  ~Etimes();
  virtual void accept(Visitor *v);
  virtual Etimes *clone() const;
  void swap(Etimes &);
};

class Ediv : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Ediv(const Ediv &);
  Ediv &operator=(const Ediv &);
  Ediv(Exp *p1, Exp *p2);
  ~Ediv();
  virtual void accept(Visitor *v);
  virtual Ediv *clone() const;
  void swap(Ediv &);
};

class Emod : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Emod(const Emod &);
  Emod &operator=(const Emod &);
  Emod(Exp *p1, Exp *p2);
  ~Emod();
  virtual void accept(Visitor *v);
  virtual Emod *clone() const;
  void swap(Emod &);
};

class Etypeconv : public Exp
{
public:
  Type_name *type_name_;
  Exp *exp_;

  Etypeconv(const Etypeconv &);
  Etypeconv &operator=(const Etypeconv &);
  Etypeconv(Type_name *p1, Exp *p2);
  ~Etypeconv();
  virtual void accept(Visitor *v);
  virtual Etypeconv *clone() const;
  void swap(Etypeconv &);
};

class Epreinc : public Exp
{
public:
  Exp *exp_;

  Epreinc(const Epreinc &);
  Epreinc &operator=(const Epreinc &);
  Epreinc(Exp *p1);
  ~Epreinc();
  virtual void accept(Visitor *v);
  virtual Epreinc *clone() const;
  void swap(Epreinc &);
};

class Epredec : public Exp
{
public:
  Exp *exp_;

  Epredec(const Epredec &);
  Epredec &operator=(const Epredec &);
  Epredec(Exp *p1);
  ~Epredec();
  virtual void accept(Visitor *v);
  virtual Epredec *clone() const;
  void swap(Epredec &);
};

class Epreop : public Exp
{
public:
  Unary_operator *unary_operator_;
  Exp *exp_;

  Epreop(const Epreop &);
  Epreop &operator=(const Epreop &);
  Epreop(Unary_operator *p1, Exp *p2);
  ~Epreop();
  virtual void accept(Visitor *v);
  virtual Epreop *clone() const;
  void swap(Epreop &);
};

class Ebytesexpr : public Exp
{
public:
  Exp *exp_;

  Ebytesexpr(const Ebytesexpr &);
  Ebytesexpr &operator=(const Ebytesexpr &);
  Ebytesexpr(Exp *p1);
  ~Ebytesexpr();
  virtual void accept(Visitor *v);
  virtual Ebytesexpr *clone() const;
  void swap(Ebytesexpr &);
};

class Ebytestype : public Exp
{
public:
  Type_name *type_name_;

  Ebytestype(const Ebytestype &);
  Ebytestype &operator=(const Ebytestype &);
  Ebytestype(Type_name *p1);
  ~Ebytestype();
  virtual void accept(Visitor *v);
  virtual Ebytestype *clone() const;
  void swap(Ebytestype &);
};

class Earray : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  Earray(const Earray &);
  Earray &operator=(const Earray &);
  Earray(Exp *p1, Exp *p2);
  ~Earray();
  virtual void accept(Visitor *v);
  virtual Earray *clone() const;
  void swap(Earray &);
};

class Efunk : public Exp
{
public:
  Exp *exp_;

  Efunk(const Efunk &);
  Efunk &operator=(const Efunk &);
  Efunk(Exp *p1);
  ~Efunk();
  virtual void accept(Visitor *v);
  virtual Efunk *clone() const;
  void swap(Efunk &);
};

class Efunkpar : public Exp
{
public:
  Exp *exp_;
  ListExp *listexp_;

  Efunkpar(const Efunkpar &);
  Efunkpar &operator=(const Efunkpar &);
  Efunkpar(Exp *p1, ListExp *p2);
  ~Efunkpar();
  virtual void accept(Visitor *v);
  virtual Efunkpar *clone() const;
  void swap(Efunkpar &);
};

class Eselect : public Exp
{
public:
  Exp *exp_;
  Ident ident_;

  Eselect(const Eselect &);
  Eselect &operator=(const Eselect &);
  Eselect(Exp *p1, Ident p2);
  ~Eselect();
  virtual void accept(Visitor *v);
  virtual Eselect *clone() const;
  void swap(Eselect &);
};

class Epoint : public Exp
{
public:
  Exp *exp_;
  Ident ident_;

  Epoint(const Epoint &);
  Epoint &operator=(const Epoint &);
  Epoint(Exp *p1, Ident p2);
  ~Epoint();
  virtual void accept(Visitor *v);
  virtual Epoint *clone() const;
  void swap(Epoint &);
};

class Epostinc : public Exp
{
public:
  Exp *exp_;

  Epostinc(const Epostinc &);
  Epostinc &operator=(const Epostinc &);
  Epostinc(Exp *p1);
  ~Epostinc();
  virtual void accept(Visitor *v);
  virtual Epostinc *clone() const;
  void swap(Epostinc &);
};

class Epostdec : public Exp
{
public:
  Exp *exp_;

  Epostdec(const Epostdec &);
  Epostdec &operator=(const Epostdec &);
  Epostdec(Exp *p1);
  ~Epostdec();
  virtual void accept(Visitor *v);
  virtual Epostdec *clone() const;
  void swap(Epostdec &);
};

class Evar : public Exp
{
public:
  Ident ident_;

  Evar(const Evar &);
  Evar &operator=(const Evar &);
  Evar(Ident p1);
  ~Evar();
  virtual void accept(Visitor *v);
  virtual Evar *clone() const;
  void swap(Evar &);
};

class Econst : public Exp
{
public:
  Constant *constant_;

  Econst(const Econst &);
  Econst &operator=(const Econst &);
  Econst(Constant *p1);
  ~Econst();
  virtual void accept(Visitor *v);
  virtual Econst *clone() const;
  void swap(Econst &);
};

class Estring : public Exp
{
public:
  String string_;

  Estring(const Estring &);
  Estring &operator=(const Estring &);
  Estring(String p1);
  ~Estring();
  virtual void accept(Visitor *v);
  virtual Estring *clone() const;
  void swap(Estring &);
};

class Efloat : public Constant
{
public:
  Double double_;

  Efloat(const Efloat &);
  Efloat &operator=(const Efloat &);
  Efloat(Double p1);
  ~Efloat();
  virtual void accept(Visitor *v);
  virtual Efloat *clone() const;
  void swap(Efloat &);
};

class Echar : public Constant
{
public:
  Char char_;

  Echar(const Echar &);
  Echar &operator=(const Echar &);
  Echar(Char p1);
  ~Echar();
  virtual void accept(Visitor *v);
  virtual Echar *clone() const;
  void swap(Echar &);
};

class Eunsigned : public Constant
{
public:
  Unsigned unsigned_;

  Eunsigned(const Eunsigned &);
  Eunsigned &operator=(const Eunsigned &);
  Eunsigned(Unsigned p1);
  ~Eunsigned();
  virtual void accept(Visitor *v);
  virtual Eunsigned *clone() const;
  void swap(Eunsigned &);
};

class Elong : public Constant
{
public:
  Long long_;

  Elong(const Elong &);
  Elong &operator=(const Elong &);
  Elong(Long p1);
  ~Elong();
  virtual void accept(Visitor *v);
  virtual Elong *clone() const;
  void swap(Elong &);
};

class Eunsignlong : public Constant
{
public:
  UnsignedLong unsignedlong_;

  Eunsignlong(const Eunsignlong &);
  Eunsignlong &operator=(const Eunsignlong &);
  Eunsignlong(UnsignedLong p1);
  ~Eunsignlong();
  virtual void accept(Visitor *v);
  virtual Eunsignlong *clone() const;
  void swap(Eunsignlong &);
};

class Ehexadec : public Constant
{
public:
  Hexadecimal hexadecimal_;

  Ehexadec(const Ehexadec &);
  Ehexadec &operator=(const Ehexadec &);
  Ehexadec(Hexadecimal p1);
  ~Ehexadec();
  virtual void accept(Visitor *v);
  virtual Ehexadec *clone() const;
  void swap(Ehexadec &);
};

class Ehexaunsign : public Constant
{
public:
  HexUnsigned hexunsigned_;

  Ehexaunsign(const Ehexaunsign &);
  Ehexaunsign &operator=(const Ehexaunsign &);
  Ehexaunsign(HexUnsigned p1);
  ~Ehexaunsign();
  virtual void accept(Visitor *v);
  virtual Ehexaunsign *clone() const;
  void swap(Ehexaunsign &);
};

class Ehexalong : public Constant
{
public:
  HexLong hexlong_;

  Ehexalong(const Ehexalong &);
  Ehexalong &operator=(const Ehexalong &);
  Ehexalong(HexLong p1);
  ~Ehexalong();
  virtual void accept(Visitor *v);
  virtual Ehexalong *clone() const;
  void swap(Ehexalong &);
};

class Ehexaunslong : public Constant
{
public:
  HexUnsLong hexunslong_;

  Ehexaunslong(const Ehexaunslong &);
  Ehexaunslong &operator=(const Ehexaunslong &);
  Ehexaunslong(HexUnsLong p1);
  ~Ehexaunslong();
  virtual void accept(Visitor *v);
  virtual Ehexaunslong *clone() const;
  void swap(Ehexaunslong &);
};

class Eoctal : public Constant
{
public:
  Octal octal_;

  Eoctal(const Eoctal &);
  Eoctal &operator=(const Eoctal &);
  Eoctal(Octal p1);
  ~Eoctal();
  virtual void accept(Visitor *v);
  virtual Eoctal *clone() const;
  void swap(Eoctal &);
};

class Eoctalunsign : public Constant
{
public:
  OctalUnsigned octalunsigned_;

  Eoctalunsign(const Eoctalunsign &);
  Eoctalunsign &operator=(const Eoctalunsign &);
  Eoctalunsign(OctalUnsigned p1);
  ~Eoctalunsign();
  virtual void accept(Visitor *v);
  virtual Eoctalunsign *clone() const;
  void swap(Eoctalunsign &);
};

class Eoctallong : public Constant
{
public:
  OctalLong octallong_;

  Eoctallong(const Eoctallong &);
  Eoctallong &operator=(const Eoctallong &);
  Eoctallong(OctalLong p1);
  ~Eoctallong();
  virtual void accept(Visitor *v);
  virtual Eoctallong *clone() const;
  void swap(Eoctallong &);
};

class Eoctalunslong : public Constant
{
public:
  OctalUnsLong octalunslong_;

  Eoctalunslong(const Eoctalunslong &);
  Eoctalunslong &operator=(const Eoctalunslong &);
  Eoctalunslong(OctalUnsLong p1);
  ~Eoctalunslong();
  virtual void accept(Visitor *v);
  virtual Eoctalunslong *clone() const;
  void swap(Eoctalunslong &);
};

class Ecdouble : public Constant
{
public:
  CDouble cdouble_;

  Ecdouble(const Ecdouble &);
  Ecdouble &operator=(const Ecdouble &);
  Ecdouble(CDouble p1);
  ~Ecdouble();
  virtual void accept(Visitor *v);
  virtual Ecdouble *clone() const;
  void swap(Ecdouble &);
};

class Ecfloat : public Constant
{
public:
  CFloat cfloat_;

  Ecfloat(const Ecfloat &);
  Ecfloat &operator=(const Ecfloat &);
  Ecfloat(CFloat p1);
  ~Ecfloat();
  virtual void accept(Visitor *v);
  virtual Ecfloat *clone() const;
  void swap(Ecfloat &);
};

class Eclongdouble : public Constant
{
public:
  CLongDouble clongdouble_;

  Eclongdouble(const Eclongdouble &);
  Eclongdouble &operator=(const Eclongdouble &);
  Eclongdouble(CLongDouble p1);
  ~Eclongdouble();
  virtual void accept(Visitor *v);
  virtual Eclongdouble *clone() const;
  void swap(Eclongdouble &);
};

class Eint : public Constant
{
public:
  Integer integer_;

  Eint(const Eint &);
  Eint &operator=(const Eint &);
  Eint(Integer p1);
  ~Eint();
  virtual void accept(Visitor *v);
  virtual Eint *clone() const;
  void swap(Eint &);
};

class Elonger : public Constant
{
public:
  Integer integer_;

  Elonger(const Elonger &);
  Elonger &operator=(const Elonger &);
  Elonger(Integer p1);
  ~Elonger();
  virtual void accept(Visitor *v);
  virtual Elonger *clone() const;
  void swap(Elonger &);
};

class Edouble : public Constant
{
public:
  Double double_;

  Edouble(const Edouble &);
  Edouble &operator=(const Edouble &);
  Edouble(Double p1);
  ~Edouble();
  virtual void accept(Visitor *v);
  virtual Edouble *clone() const;
  void swap(Edouble &);
};

class Especial : public Constant_expression
{
public:
  Exp *exp_;

  Especial(const Especial &);
  Especial &operator=(const Especial &);
  Especial(Exp *p1);
  ~Especial();
  virtual void accept(Visitor *v);
  virtual Especial *clone() const;
  void swap(Especial &);
};

class Address : public Unary_operator
{
public:

  Address(const Address &);
  Address &operator=(const Address &);
  Address();
  ~Address();
  virtual void accept(Visitor *v);
  virtual Address *clone() const;
  void swap(Address &);
};

class Indirection : public Unary_operator
{
public:

  Indirection(const Indirection &);
  Indirection &operator=(const Indirection &);
  Indirection();
  ~Indirection();
  virtual void accept(Visitor *v);
  virtual Indirection *clone() const;
  void swap(Indirection &);
};

class Plus : public Unary_operator
{
public:

  Plus(const Plus &);
  Plus &operator=(const Plus &);
  Plus();
  ~Plus();
  virtual void accept(Visitor *v);
  virtual Plus *clone() const;
  void swap(Plus &);
};

class Negative : public Unary_operator
{
public:

  Negative(const Negative &);
  Negative &operator=(const Negative &);
  Negative();
  ~Negative();
  virtual void accept(Visitor *v);
  virtual Negative *clone() const;
  void swap(Negative &);
};

class Complement : public Unary_operator
{
public:

  Complement(const Complement &);
  Complement &operator=(const Complement &);
  Complement();
  ~Complement();
  virtual void accept(Visitor *v);
  virtual Complement *clone() const;
  void swap(Complement &);
};

class Logicalneg : public Unary_operator
{
public:

  Logicalneg(const Logicalneg &);
  Logicalneg &operator=(const Logicalneg &);
  Logicalneg();
  ~Logicalneg();
  virtual void accept(Visitor *v);
  virtual Logicalneg *clone() const;
  void swap(Logicalneg &);
};

class Assign : public Assignment_op
{
public:

  Assign(const Assign &);
  Assign &operator=(const Assign &);
  Assign();
  ~Assign();
  virtual void accept(Visitor *v);
  virtual Assign *clone() const;
  void swap(Assign &);
};

class AssignMul : public Assignment_op
{
public:

  AssignMul(const AssignMul &);
  AssignMul &operator=(const AssignMul &);
  AssignMul();
  ~AssignMul();
  virtual void accept(Visitor *v);
  virtual AssignMul *clone() const;
  void swap(AssignMul &);
};

class AssignDiv : public Assignment_op
{
public:

  AssignDiv(const AssignDiv &);
  AssignDiv &operator=(const AssignDiv &);
  AssignDiv();
  ~AssignDiv();
  virtual void accept(Visitor *v);
  virtual AssignDiv *clone() const;
  void swap(AssignDiv &);
};

class AssignMod : public Assignment_op
{
public:

  AssignMod(const AssignMod &);
  AssignMod &operator=(const AssignMod &);
  AssignMod();
  ~AssignMod();
  virtual void accept(Visitor *v);
  virtual AssignMod *clone() const;
  void swap(AssignMod &);
};

class AssignAdd : public Assignment_op
{
public:

  AssignAdd(const AssignAdd &);
  AssignAdd &operator=(const AssignAdd &);
  AssignAdd();
  ~AssignAdd();
  virtual void accept(Visitor *v);
  virtual AssignAdd *clone() const;
  void swap(AssignAdd &);
};

class AssignSub : public Assignment_op
{
public:

  AssignSub(const AssignSub &);
  AssignSub &operator=(const AssignSub &);
  AssignSub();
  ~AssignSub();
  virtual void accept(Visitor *v);
  virtual AssignSub *clone() const;
  void swap(AssignSub &);
};

class AssignLeft : public Assignment_op
{
public:

  AssignLeft(const AssignLeft &);
  AssignLeft &operator=(const AssignLeft &);
  AssignLeft();
  ~AssignLeft();
  virtual void accept(Visitor *v);
  virtual AssignLeft *clone() const;
  void swap(AssignLeft &);
};

class AssignRight : public Assignment_op
{
public:

  AssignRight(const AssignRight &);
  AssignRight &operator=(const AssignRight &);
  AssignRight();
  ~AssignRight();
  virtual void accept(Visitor *v);
  virtual AssignRight *clone() const;
  void swap(AssignRight &);
};

class AssignAnd : public Assignment_op
{
public:

  AssignAnd(const AssignAnd &);
  AssignAnd &operator=(const AssignAnd &);
  AssignAnd();
  ~AssignAnd();
  virtual void accept(Visitor *v);
  virtual AssignAnd *clone() const;
  void swap(AssignAnd &);
};

class AssignXor : public Assignment_op
{
public:

  AssignXor(const AssignXor &);
  AssignXor &operator=(const AssignXor &);
  AssignXor();
  ~AssignXor();
  virtual void accept(Visitor *v);
  virtual AssignXor *clone() const;
  void swap(AssignXor &);
};

class AssignOr : public Assignment_op
{
public:

  AssignOr(const AssignOr &);
  AssignOr &operator=(const AssignOr &);
  AssignOr();
  ~AssignOr();
  virtual void accept(Visitor *v);
  virtual AssignOr *clone() const;
  void swap(AssignOr &);
};



class ListExternal_declaration : public Visitable, public std::vector<External_declaration*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExternal_declaration *clone() const;
};

class ListDec : public Visitable, public std::vector<Dec*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDec *clone() const;
};

class ListDeclaration_specifier : public Visitable, public std::vector<Declaration_specifier*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDeclaration_specifier *clone() const;
};

class ListInit_declarator : public Visitable, public std::vector<Init_declarator*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListInit_declarator *clone() const;
};

class ListStruct_dec : public Visitable, public std::vector<Struct_dec*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStruct_dec *clone() const;
};

class ListSpec_qual : public Visitable, public std::vector<Spec_qual*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListSpec_qual *clone() const;
};

class ListStruct_declarator : public Visitable, public std::vector<Struct_declarator*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStruct_declarator *clone() const;
};

class ListEnumerator : public Visitable, public std::vector<Enumerator*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListEnumerator *clone() const;
};

class ListType_qualifier : public Visitable, public std::vector<Type_qualifier*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListType_qualifier *clone() const;
};

class ListIdent : public Visitable, public std::vector<Ident>
{
public:
  virtual void accept(Visitor *v);
  virtual ListIdent *clone() const;
};

class ListStm : public Visitable, public std::vector<Stm*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStm *clone() const;
};

class ListExp : public Visitable, public std::vector<Exp*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExp *clone() const;
};



#endif
